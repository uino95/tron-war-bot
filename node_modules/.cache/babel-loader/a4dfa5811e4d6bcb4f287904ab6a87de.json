{"ast":null,"code":"import _toConsumableArray from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from \"redux\";\nimport { SELECT_NATION, MAP_UPDATED, NEW_BET } from \"./actions\";\n\nvar merge = function merge(prev, next) {\n  return Object.assign({}, prev, next);\n};\n\nvar initialState = {\n  selectedNations: [],\n  nations: []\n};\n\nvar betsReducer = function betsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NEW_BET:\n      return [].concat(_toConsumableArray(state), [action.bet]);\n\n    default:\n      return state;\n  }\n};\n\nvar mapReducer = function mapReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_NATION:\n      if (state.selectedNations.includes(action.nation)) return {\n        selectedNations: state.selectedNations.filter(function (nation) {\n          return action.nation != nation;\n        }),\n        nations: state.nations\n      };else return {\n        selectedNations: [].concat(_toConsumableArray(state.selectedNations), [action.nation]),\n        nations: state.nations\n      };\n\n    case MAP_UPDATED:\n      return {\n        selectedNations: [],\n        nations: action.nations\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = combineReducers({\n  map: mapReducer,\n  bets: betsReducer\n});\nexport default reducer;","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/redux/reducer.js"],"names":["combineReducers","SELECT_NATION","MAP_UPDATED","NEW_BET","merge","prev","next","Object","assign","initialState","selectedNations","nations","betsReducer","state","action","type","bet","mapReducer","includes","nation","filter","reducer","map","bets"],"mappings":";AAAA,SACEA,eADF,QAEO,OAFP;AAIA,SACEC,aADF,EAEEC,WAFF,EAGEC,OAHF,QAIO,WAJP;;AAMA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOC,IAAP;AAAA,SAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwBC,IAAxB,CAAhB;AAAA,CAAd;;AAEA,IAAMG,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,EADE;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,OAAL;AACE,0CAAWU,KAAX,IAAkBC,MAAM,CAACE,GAAzB;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMI,UAAU,GAAG,SAAbA,UAAa,GAAkC;AAAA,MAAjCJ,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,aAAL;AACE,UAAIY,KAAK,CAACH,eAAN,CAAsBQ,QAAtB,CAA+BJ,MAAM,CAACK,MAAtC,CAAJ,EACE,OAAO;AACLT,QAAAA,eAAe,EAAEG,KAAK,CAACH,eAAN,CAAsBU,MAAtB,CAA6B,UAAAD,MAAM;AAAA,iBAAIL,MAAM,CAACK,MAAP,IAAiBA,MAArB;AAAA,SAAnC,CADZ;AAELR,QAAAA,OAAO,EAAEE,KAAK,CAACF;AAFV,OAAP,CADF,KAME,OAAO;AACLD,QAAAA,eAAe,+BAAMG,KAAK,CAACH,eAAZ,IAA6BI,MAAM,CAACK,MAApC,EADV;AAELR,QAAAA,OAAO,EAAEE,KAAK,CAACF;AAFV,OAAP;;AAIJ,SAAKT,WAAL;AACE,aAAO;AACLQ,QAAAA,eAAe,EAAE,EADZ;AAELC,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAFX,OAAP;;AAKF;AACE,aAAOE,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,IAAMQ,OAAO,GAAGrB,eAAe,CAAC;AAC9BsB,EAAAA,GAAG,EAAEL,UADyB;AAE9BM,EAAAA,IAAI,EAAEX;AAFwB,CAAD,CAA/B;AAKA,eAAeS,OAAf","sourcesContent":["import {\n  combineReducers\n} from \"redux\";\n\nimport {\n  SELECT_NATION,\n  MAP_UPDATED,\n  NEW_BET,\n} from \"./actions\";\n\nconst merge = (prev, next) => Object.assign({}, prev, next);\n\nconst initialState = {\n  selectedNations: [],\n  nations: []\n}\n\nconst betsReducer = (state = [], action) => {\n  switch (action.type) {\n    case NEW_BET:\n      return [...state, action.bet]\n    default:\n      return state\n  }\n}\n\nconst mapReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_NATION:\n      if (state.selectedNations.includes(action.nation))\n        return {\n          selectedNations: state.selectedNations.filter(nation => action.nation != nation),\n          nations: state.nations\n        }\n      else\n        return {\n          selectedNations: [...state.selectedNations, action.nation],\n          nations: state.nations\n        }\n    case MAP_UPDATED:\n      return {\n        selectedNations: [],\n        nations: action.nations\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  map: mapReducer,\n  bets: betsReducer\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}