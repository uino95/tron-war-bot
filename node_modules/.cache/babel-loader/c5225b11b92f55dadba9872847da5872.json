{"ast":null,"code":"module.exports = function (e) {\n  var t = {};\n\n  function n(r) {\n    if (t[r]) return t[r].exports;\n    var i = t[r] = {\n      i: r,\n      l: !1,\n      exports: {}\n    };\n    return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports;\n  }\n\n  return n.m = e, n.c = t, n.d = function (e, t, r) {\n    n.o(e, t) || Object.defineProperty(e, t, {\n      enumerable: !0,\n      get: r\n    });\n  }, n.r = function (e) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    });\n  }, n.t = function (e, t) {\n    if (1 & t && (e = n(e)), 8 & t) return e;\n    if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n    var r = Object.create(null);\n    if (n.r(r), Object.defineProperty(r, \"default\", {\n      enumerable: !0,\n      value: e\n    }), 2 & t && \"string\" != typeof e) for (var i in e) {\n      n.d(r, i, function (t) {\n        return e[t];\n      }.bind(null, i));\n    }\n    return r;\n  }, n.n = function (e) {\n    var t = e && e.__esModule ? function () {\n      return e.default;\n    } : function () {\n      return e;\n    };\n    return n.d(t, \"a\", t), t;\n  }, n.o = function (e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n  }, n.p = \"\", n(n.s = 22);\n}([function (e, t) {\n  e.exports = require(\"@babel/runtime/regenerator\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/classCallCheck\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/createClass\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/objectSpread\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/defineProperty\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/toConsumableArray\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/slicedToArray\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/typeof\");\n}, function (e, t) {\n  e.exports = require(\"bignumber.js\");\n}, function (e, t) {\n  e.exports = require(\"ethers\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");\n}, function (e, t) {\n  e.exports = require(\"elliptic\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/inherits\");\n}, function (e, t) {\n  e.exports = require(\"axios\");\n}, function (e, t) {\n  e.exports = require(\"validator\");\n}, function (e, t) {\n  e.exports = require(\"eventemitter3\");\n}, function (e) {\n  e.exports = {\n    a: \"2.5.3\"\n  };\n}, function (e, t) {\n  e.exports = require(\"semver\");\n}, function (e, t) {\n  e.exports = require(\"querystring\");\n}, function (e, t, n) {\n  \"use strict\";\n\n  n.r(t);\n  var r = {};\n  n.r(r), n.d(r, \"byte2hexStr\", function () {\n    return j;\n  }), n.d(r, \"bytesToString\", function () {\n    return F;\n  }), n.d(r, \"hextoString\", function () {\n    return q;\n  }), n.d(r, \"byteArray2hexStr\", function () {\n    return O;\n  }), n.d(r, \"base64DecodeFromString\", function () {\n    return D;\n  }), n.d(r, \"base64EncodeToString\", function () {\n    return K;\n  });\n  var i = {};\n  n.r(i), n.d(i, \"bin2String\", function () {\n    return M;\n  }), n.d(i, \"arrayEquals\", function () {\n    return J;\n  }), n.d(i, \"stringToBytes\", function () {\n    return G;\n  }), n.d(i, \"byte2hexStr\", function () {\n    return j;\n  }), n.d(i, \"bytesToString\", function () {\n    return F;\n  }), n.d(i, \"hextoString\", function () {\n    return q;\n  }), n.d(i, \"byteArray2hexStr\", function () {\n    return O;\n  }), n.d(i, \"base64DecodeFromString\", function () {\n    return D;\n  }), n.d(i, \"base64EncodeToString\", function () {\n    return K;\n  }), n.d(i, \"hexChar2byte\", function () {\n    return Y;\n  }), n.d(i, \"isHexChar\", function () {\n    return X;\n  }), n.d(i, \"hexStr2byteArray\", function () {\n    return Z;\n  }), n.d(i, \"strToDate\", function () {\n    return $;\n  }), n.d(i, \"isNumber\", function () {\n    return Q;\n  }), n.d(i, \"getStringType\", function () {\n    return ee;\n  });\n  var s = {};\n  n.r(s), n.d(s, \"encode58\", function () {\n    return se;\n  }), n.d(s, \"decode58\", function () {\n    return oe;\n  });\n  var o = {};\n  n.r(o), n.d(o, \"getBase58CheckAddress\", function () {\n    return pe;\n  }), n.d(o, \"decodeBase58Address\", function () {\n    return ge;\n  }), n.d(o, \"signTransaction\", function () {\n    return be;\n  }), n.d(o, \"arrayToBase64String\", function () {\n    return ye;\n  }), n.d(o, \"signBytes\", function () {\n    return me;\n  }), n.d(o, \"getRowBytesFromTransactionBase64\", function () {\n    return ke;\n  }), n.d(o, \"genPriKey\", function () {\n    return xe;\n  }), n.d(o, \"computeAddress\", function () {\n    return we;\n  }), n.d(o, \"getAddressFromPriKey\", function () {\n    return We;\n  }), n.d(o, \"decode58Check\", function () {\n    return Ae;\n  }), n.d(o, \"isAddressValid\", function () {\n    return Ie;\n  }), n.d(o, \"getBase58CheckAddressFromPriKeyBase64String\", function () {\n    return Ne;\n  }), n.d(o, \"getHexStrAddressFromPriKeyBase64String\", function () {\n    return Pe;\n  }), n.d(o, \"getAddressFromPriKeyBase64String\", function () {\n    return Se;\n  }), n.d(o, \"getPubKeyFromPriKey\", function () {\n    return _e;\n  }), n.d(o, \"ECKeySign\", function () {\n    return Te;\n  }), n.d(o, \"SHA256\", function () {\n    return Be;\n  }), n.d(o, \"passwordToAddress\", function () {\n    return Ce;\n  }), n.d(o, \"pkToAddress\", function () {\n    return Ee;\n  });\n  var a = {};\n  n.r(a), n.d(a, \"generateAccount\", function () {\n    return je;\n  });\n  var u = {};\n  n.r(u), n.d(u, \"decodeParams\", function () {\n    return qe;\n  }), n.d(u, \"encodeParams\", function () {\n    return Oe;\n  });\n\n  var c = n(0),\n      d = n.n(c),\n      l = n(1),\n      h = n.n(l),\n      f = n(8),\n      v = n.n(f),\n      p = n(2),\n      g = n.n(p),\n      b = n(3),\n      y = n.n(b),\n      m = n(13),\n      k = n.n(m),\n      x = n(14),\n      w = n.n(x),\n      W = n(11),\n      A = n.n(W),\n      I = n(15),\n      N = n.n(I),\n      P = n(5),\n      S = n.n(P),\n      _ = n(16),\n      T = n.n(_),\n      B = n(4),\n      C = n.n(B);\n\n  function E() {\n    var e = this;\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", this.encode = function (t) {\n      for (var n, r, i, s, o, a, u, c = \"\", d = 0; d < t.length;) {\n        s = (n = t.charCodeAt(d++)) >> 2, o = (3 & n) << 4 | (r = t.charCodeAt(d++)) >> 4, a = (15 & r) << 2 | (i = t.charCodeAt(d++)) >> 6, u = 63 & i, isNaN(r) ? a = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(o) + e._keyStr.charAt(a) + e._keyStr.charAt(u);\n      }\n\n      return c;\n    }, this.encodeIgnoreUtf8 = function (t) {\n      for (var n, r, i, s, o, a, u, c = \"\", d = 0; d < t.length;) {\n        s = (n = t[d++]) >> 2, o = (3 & n) << 4 | (r = t[d++]) >> 4, a = (15 & r) << 2 | (i = t[d++]) >> 6, u = 63 & i, isNaN(r) ? a = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(o) + e._keyStr.charAt(a) + e._keyStr.charAt(u);\n      }\n\n      return c;\n    }, this.decode = function (t) {\n      var n,\n          r,\n          i,\n          s,\n          o,\n          a,\n          u = \"\",\n          c = 0;\n\n      for (t = t.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\"); c < t.length;) {\n        n = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, r = (15 & s) << 4 | (o = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & o) << 6 | (a = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(n), 64 != o && (u += String.fromCharCode(r)), 64 != a && (u += String.fromCharCode(i));\n      }\n\n      return e._utf8_decode(u);\n    }, this.decodeToByteArray = function (t) {\n      var n,\n          r,\n          i,\n          s,\n          o,\n          a,\n          u = \"\",\n          c = 0;\n\n      for (t = t.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\"); c < t.length;) {\n        n = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, r = (15 & s) << 4 | (o = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & o) << 6 | (a = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(n), 64 != o && (u += String.fromCharCode(r)), 64 != a && (u += String.fromCharCode(i));\n      }\n\n      return e._out2ByteArray(u);\n    }, this._out2ByteArray = function (e) {\n      for (var t = new Array(e.length), n = 0, r = 0; n < e.length;) {\n        r = e.charCodeAt(n), t[n] = r, n++;\n      }\n\n      return t;\n    }, this._utf8_encode = function (e) {\n      e = e.replace(/\\r\\n/g, \"\\n\");\n\n      for (var t = \"\", n = 0; n < e.length; n++) {\n        var r = e.charCodeAt(n);\n        r < 128 ? t += String.fromCharCode(r) : r > 127 && r < 2048 ? (t += String.fromCharCode(r >> 6 | 192), t += String.fromCharCode(63 & r | 128)) : (t += String.fromCharCode(r >> 12 | 224), t += String.fromCharCode(r >> 6 & 63 | 128), t += String.fromCharCode(63 & r | 128));\n      }\n\n      return t;\n    }, this._utf8_decode = function (e) {\n      for (var t = \"\", n = 0, r = 0, i = 0, s = 0; n < e.length;) {\n        (r = e.charCodeAt(n)) < 128 ? (t += String.fromCharCode(r), n++) : r > 191 && r < 224 ? (i = e.charCodeAt(n + 1), t += String.fromCharCode((31 & r) << 6 | 63 & i), n += 2) : (i = e.charCodeAt(n + 1), s = e.charCodeAt(n + 2), t += String.fromCharCode((15 & r) << 12 | (63 & i) << 6 | 63 & s), n += 3);\n      }\n\n      return t;\n    };\n  }\n\n  function j(e) {\n    if (\"number\" != typeof e) throw new Error(\"Input must be a number\");\n    if (e < 0 || e > 255) throw new Error(\"Input must be a byte\");\n    var t = \"\";\n    return t += \"0123456789ABCDEF\".charAt(e >> 4), t += \"0123456789ABCDEF\".charAt(15 & e);\n  }\n\n  function F(e) {\n    if (\"string\" == typeof e) return e;\n\n    for (var t = \"\", n = 0; n < e.length; n++) {\n      var r = e[n].toString(2),\n          i = r.match(/^1+?(?=0)/);\n\n      if (i && 8 === r.length) {\n        for (var s = i[0].length, o = e[n].toString(2).slice(7 - s), a = 1; a < s; a++) {\n          o += e[a + n].toString(2).slice(2);\n        }\n\n        t += String.fromCharCode(parseInt(o, 2)), n += s - 1;\n      } else t += String.fromCharCode(e[n]);\n    }\n\n    return t;\n  }\n\n  function q(e) {\n    for (var t = e.replace(/^0x/, \"\").split(\"\"), n = \"\", r = 0; r < t.length / 2; r++) {\n      var i = \"0x\".concat(t[2 * r]).concat(t[2 * r + 1]);\n      n += String.fromCharCode(i);\n    }\n\n    return n;\n  }\n\n  function O(e) {\n    for (var t = \"\", n = 0; n < e.length; n++) {\n      t += j(e[n]);\n    }\n\n    return t;\n  }\n\n  function D(e) {\n    return new E().decodeToByteArray(e);\n  }\n\n  function K(e) {\n    return new E().encodeIgnoreUtf8(e);\n  }\n\n  var H = n(6),\n      R = n.n(H),\n      L = 34,\n      U = \"41\",\n      V = 65,\n      z = /^(41)/;\n\n  function M(e) {\n    return F(e);\n  }\n\n  function J(e, t, n) {\n    if (e.length != t.length) return !1;\n    var r;\n\n    for (r = 0; r < e.length; r++) {\n      if (n) {\n        if (e[r] != t[r]) return !1;\n      } else if (JSON.stringify(e[r]) != JSON.stringify(t[r])) return !1;\n    }\n\n    return !0;\n  }\n\n  function G(e) {\n    if (\"string\" != typeof e) throw new Error(\"The passed string is not a string\");\n    var t,\n        n,\n        r = new Array();\n    t = e.length;\n\n    for (var i = 0; i < t; i++) {\n      (n = e.charCodeAt(i)) >= 65536 && n <= 1114111 ? (r.push(n >> 18 & 7 | 240), r.push(n >> 12 & 63 | 128), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128)) : n >= 2048 && n <= 65535 ? (r.push(n >> 12 & 15 | 224), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128)) : n >= 128 && n <= 2047 ? (r.push(n >> 6 & 31 | 192), r.push(63 & n | 128)) : r.push(255 & n);\n    }\n\n    return r;\n  }\n\n  function Y(e) {\n    var t;\n    if (e >= \"A\" && e <= \"F\" ? t = e.charCodeAt(0) - \"A\".charCodeAt(0) + 10 : e >= \"a\" && e <= \"f\" ? t = e.charCodeAt(0) - \"a\".charCodeAt(0) + 10 : e >= \"0\" && e <= \"9\" && (t = e.charCodeAt(0) - \"0\".charCodeAt(0)), \"number\" == typeof t) return t;\n    throw new Error(\"The passed hex char is not a valid hex char\");\n  }\n\n  function X(e) {\n    return e >= \"A\" && e <= \"F\" || e >= \"a\" && e <= \"f\" || e >= \"0\" && e <= \"9\" ? 1 : 0;\n  }\n\n  function Z(e) {\n    if (\"string\" != typeof e) throw new Error(\"The passed string is not a string\");\n\n    for (var t = Array(), n = 0, r = 0, i = 0, s = 0; s < e.length; s++) {\n      var o = e.charAt(s);\n      if (!X(o)) throw new Error(\"The passed hex char is not a valid hex string\");\n      n <<= 4, n += Y(o), 0 == ++r % 2 && (t[i++] = n, n = 0);\n    }\n\n    return t;\n  }\n\n  function $(e) {\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(e)) throw new Error(\"The passed date string is not valid\");\n    var t = e.split(\" \"),\n        n = t[0].split(\"-\"),\n        r = parseInt(n[0], 10),\n        i = parseInt(n[1], 10) - 1,\n        s = parseInt(n[2], 10);\n\n    if (t.length > 1) {\n      var o = t[1].split(\"-\"),\n          a = parseInt(o[0], 10),\n          u = parseInt(o[1], 10),\n          c = parseInt(o[2], 10);\n      return new Date(r, i, s, a, u, c);\n    }\n\n    return new Date(r, i, s);\n  }\n\n  function Q(e) {\n    return e >= \"0\" && e <= \"9\" ? 1 : 0;\n  }\n\n  function ee(e) {\n    if (null == e) return -1;\n    if (\"string\" != typeof e) return -1;\n    if (0 == e.length || \"\" == e) return -1;\n    var t = 0;\n    if (40 == e.length) for (; t < 40; t++) {\n      if (!X(e.charAt(t))) break;\n    }\n    if (40 == t) return 1;\n\n    for (t = 0; t < e.length; t++) {\n      if (!Q(e.charAt(t))) break;\n    }\n\n    if (t == e.length) return 2;\n\n    for (t = 0; t < e.length; t++) {\n      if (e.charAt(t) > \" \") return 3;\n    }\n\n    return -1;\n  }\n\n  for (var te = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\", ne = {}, re = 0; re < te.length; re++) {\n    ne[te.charAt(re)] = re;\n  }\n\n  var ie = 58;\n\n  function se(e) {\n    if (0 === e.length) return \"\";\n    var t,\n        n,\n        r = [0];\n\n    for (t = 0; t < e.length; t++) {\n      for (n = 0; n < r.length; n++) {\n        r[n] <<= 8;\n      }\n\n      r[0] += e[t];\n      var i = 0;\n\n      for (n = 0; n < r.length; ++n) {\n        r[n] += i, i = r[n] / ie | 0, r[n] %= ie;\n      }\n\n      for (; i;) {\n        r.push(i % ie), i = i / ie | 0;\n      }\n    }\n\n    for (t = 0; 0 === e[t] && t < e.length - 1; t++) {\n      r.push(0);\n    }\n\n    return r.reverse().map(function (e) {\n      return te[e];\n    }).join(\"\");\n  }\n\n  function oe(e) {\n    if (0 === e.length) return [];\n    var t,\n        n,\n        r = [0];\n\n    for (t = 0; t < e.length; t++) {\n      var i = e[t];\n      if (!(i in ne)) throw new Error(\"Non-base58 character\");\n\n      for (n = 0; n < r.length; n++) {\n        r[n] *= ie;\n      }\n\n      r[0] += ne[i];\n      var s = 0;\n\n      for (n = 0; n < r.length; ++n) {\n        r[n] += s, s = r[n] >> 8, r[n] &= 255;\n      }\n\n      for (; s;) {\n        r.push(255 & s), s >>= 8;\n      }\n    }\n\n    for (t = 0; \"1\" === e[t] && t < e.length - 1; t++) {\n      r.push(0);\n    }\n\n    return r.reverse();\n  }\n\n  var ae = n(12),\n      ue = n(10),\n      ce = ue.utils.keccak256,\n      de = ue.utils.sha256,\n      le = ue.utils.toUtf8Bytes,\n      he = ue.utils.recoverAddress,\n      fe = ue.utils.SigningKey,\n      ve = ue.utils.AbiCoder;\n\n  function pe(e) {\n    var t = Be(e),\n        n = Be(t).slice(0, 4);\n    return se(n = e.concat(n));\n  }\n\n  function ge(e) {\n    if (\"string\" != typeof e) return !1;\n    if (e.length <= 4) return !1;\n    var t = oe(e);\n    if (e.length <= 4) return !1;\n    var n = t.length - 4,\n        r = t.slice(n),\n        i = Be(t = t.slice(0, n)),\n        s = Be(i).slice(0, 4);\n    if (r[0] == s[0] && r[1] == s[1] && r[2] == s[2] && r[3] == s[3]) return t;\n    throw new Error(\"Invalid address provided\");\n  }\n\n  function be(e, t) {\n    \"string\" == typeof e && (e = Z(e));\n    var n = Te(Z(t.txID), e);\n    return Array.isArray(t.signature) ? t.signature.includes(n) || t.signature.push(n) : t.signature = [n], t;\n  }\n\n  function ye(e) {\n    return btoa(String.fromCharCode.apply(String, R()(e)));\n  }\n\n  function me(e, t) {\n    return \"string\" == typeof e && (e = Z(e)), Te(Be(t), e);\n  }\n\n  function ke(e) {\n    var t = D(e);\n    return proto.protocol.Transaction.deserializeBinary(t).getRawData().serializeBinary();\n  }\n\n  function xe() {\n    for (var e = new ae.ec(\"secp256k1\").genKeyPair().getPrivate().toString(\"hex\"); e.length < 64;) {\n      e = \"0\".concat(e);\n    }\n\n    return Z(e);\n  }\n\n  function we(e) {\n    65 === e.length && (e = e.slice(1));\n    var t = ce(e).toString().substring(2);\n    return Z(U + t.substring(24));\n  }\n\n  function We(e) {\n    return we(_e(e));\n  }\n\n  function Ae(e) {\n    var t = oe(e);\n    if (t.length <= 4) return !1;\n    var n = t.slice(0, t.length - 4),\n        r = Be(n),\n        i = Be(r);\n    return i[0] === t[n.length] && i[1] === t[n.length + 1] && i[2] === t[n.length + 2] && i[3] === t[n.length + 3] && n;\n  }\n\n  function Ie(e) {\n    if (\"string\" != typeof e) return !1;\n    if (e.length !== L) return !1;\n    var t = oe(e);\n    if (25 !== t.length) return !1;\n    if (t[0] !== V) return !1;\n    var n = t.slice(21),\n        r = Be(t = t.slice(0, 21)),\n        i = Be(r).slice(0, 4);\n    return n[0] == i[0] && n[1] == i[1] && n[2] == i[2] && n[3] == i[3];\n  }\n\n  function Ne(e) {\n    return pe(we(_e(D(e))));\n  }\n\n  function Pe(e) {\n    return O(we(_e(D(e))));\n  }\n\n  function Se(e) {\n    return K(we(_e(D(e))));\n  }\n\n  function _e(e) {\n    for (var t = new ae.ec(\"secp256k1\").keyFromPrivate(e, \"bytes\").getPublic(), n = t.x, r = t.y, i = n.toString(\"hex\"); i.length < 64;) {\n      i = \"0\".concat(i);\n    }\n\n    for (var s = r.toString(\"hex\"); s.length < 64;) {\n      s = \"0\".concat(s);\n    }\n\n    return Z(\"04\".concat(i).concat(s));\n  }\n\n  function Te(e, t) {\n    for (var n = new ae.ec(\"secp256k1\").keyFromPrivate(t, \"bytes\").sign(e), r = n.r, i = n.s, s = n.recoveryParam, o = r.toString(\"hex\"); o.length < 64;) {\n      o = \"0\".concat(o);\n    }\n\n    for (var a = i.toString(\"hex\"); a.length < 64;) {\n      a = \"0\".concat(a);\n    }\n\n    return o + a + j(s);\n  }\n\n  function Be(e) {\n    var t = O(e);\n    return Z(de(\"0x\" + t).replace(/^0x/, \"\"));\n  }\n\n  function Ce(e) {\n    return pe(We(D(e)));\n  }\n\n  function Ee(e) {\n    return pe(We(Z(e)));\n  }\n\n  function je() {\n    var e = xe(),\n        t = _e(e),\n        n = We(e);\n\n    return {\n      privateKey: O(e),\n      publicKey: O(t),\n      address: {\n        base58: pe(n),\n        hex: O(n)\n      }\n    };\n  }\n\n  var Fe = new ve();\n\n  function qe(e, t, n, r) {\n    if (n && \"boolean\" != typeof n || (r = n, n = t, t = e, e = []), r && n.replace(/^0x/, \"\").length % 64 == 8 && (n = \"0x\" + n.replace(/^0x/, \"\").substring(8)), n.replace(/^0x/, \"\").length % 64) throw new Error(\"The encoded string is not valid. Its length must be a multiple of 64.\");\n    return Fe.decode(t, n).reduce(function (n, r, i) {\n      return \"address\" == t[i] && (r = U + r.substr(2).toLowerCase()), e.length ? n[e[i]] = r : n.push(r), n;\n    }, e.length ? {} : []);\n  }\n\n  function Oe(e, t) {\n    for (var n = 0; n < e.length; n++) {\n      \"address\" === e[n] && (t[n] = vt.address.toHex(t[n]).replace(z, \"0x\"));\n    }\n\n    return Fe.encode(e, t);\n  }\n\n  var De,\n      Ke = n(17),\n      He = n.n(Ke),\n      Re = n(9),\n      Le = n.n(Re),\n      Ue = {\n    isValidURL: function isValidURL(e) {\n      return \"string\" == typeof e && He.a.isURL(e.toString(), {\n        protocols: [\"http\", \"https\"],\n        require_tld: !1\n      });\n    },\n    isObject: function isObject(e) {\n      return e === Object(e) && \"[object Array]\" !== Object.prototype.toString.call(e);\n    },\n    isArray: function isArray(e) {\n      return Array.isArray(e);\n    },\n    isJson: function isJson(e) {\n      try {\n        return !!JSON.parse(e);\n      } catch (e) {\n        return !1;\n      }\n    },\n    isBoolean: function isBoolean(e) {\n      return \"boolean\" == typeof e;\n    },\n    isBigNumber: function isBigNumber(e) {\n      return e && (e instanceof Le.a || e.constructor && \"BigNumber\" === e.constructor.name);\n    },\n    isString: function isString(e) {\n      return \"string\" == typeof e || e && e.constructor && \"String\" === e.constructor.name;\n    },\n    isFunction: function isFunction(e) {\n      return \"function\" == typeof e;\n    },\n    isHex: function isHex(e) {\n      return \"string\" == typeof e && !isNaN(parseInt(e, 16)) && /^(0x|)[a-fA-F0-9]+$/.test(e);\n    },\n    isInteger: function isInteger(e) {\n      return null !== e && Number.isInteger(Number(e));\n    },\n    hasProperty: function hasProperty(e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    },\n    hasProperties: function hasProperties(e) {\n      for (var t = this, n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) {\n        r[i - 1] = arguments[i];\n      }\n\n      return r.length && !r.map(function (n) {\n        return t.hasProperty(e, n);\n      }).includes(!1);\n    },\n    injectPromise: function injectPromise(e) {\n      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n        n[r - 1] = arguments[r];\n      }\n\n      return new Promise(function (t, r) {\n        e.apply(void 0, n.concat([function (e, n) {\n          e ? r(e) : t(n);\n        }]));\n      });\n    },\n    promiseInjector: function promiseInjector(e) {\n      var t = this;\n      return function (n) {\n        for (var r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) {\n          i[s - 1] = arguments[s];\n        }\n\n        return t.injectPromise.apply(t, [n.bind(e)].concat(i));\n      };\n    },\n    mapEvent: function mapEvent(e) {\n      var t = {\n        block: e.block_number,\n        timestamp: e.block_timestamp,\n        contract: e.contract_address,\n        name: e.event_name,\n        transaction: e.transaction_id,\n        result: e.result,\n        resourceNode: e.resource_Node || (e._unconfirmed ? \"fullNode\" : \"solidityNode\")\n      };\n      return e._unconfirmed && (t.unconfirmed = e._unconfirmed), e._fingerprint && (t.fingerprint = e._fingerprint), t;\n    },\n    parseEvent: function parseEvent(e, t) {\n      var n = t.inputs;\n      if (!e.result) return e;\n      if (this.isObject(e.result)) for (var r = 0; r < n.length; r++) {\n        var i = n[r];\n        \"address\" == i.type && i.name in e.result && (e.result[i.name] = U + e.result[i.name].substr(2).toLowerCase());\n      } else this.isArray(e.result) && (e.result = e.result.reduce(function (e, t, r) {\n        var i = n[r],\n            s = i.name;\n        return \"address\" == i.type && (t = U + t.substr(2).toLowerCase()), e[s] = t, e;\n      }, {}));\n      return e;\n    },\n    padLeft: function padLeft(e, t, n) {\n      for (var r = e.toString(); r.length < n;) {\n        r = t + r;\n      }\n\n      return r;\n    },\n    isNotNullOrUndefined: function isNotNullOrUndefined(e) {\n      return null != e;\n    }\n  },\n      Ve = C()({}, Ue, {\n    code: i,\n    accounts: a,\n    base58: s,\n    bytes: r,\n    crypto: o,\n    abi: u\n  }),\n      ze = {\n    HttpProvider: function () {\n      function e(t) {\n        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3e4,\n            r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],\n            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {},\n            o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"/\";\n        if (g()(this, e), !Ve.isValidURL(t)) throw new Error(\"Invalid URL provided to HttpProvider\");\n        if (isNaN(n) || n < 0) throw new Error(\"Invalid timeout duration provided\");\n        if (!Ve.isObject(s)) throw new Error(\"Invalid headers object provided\");\n        t = t.replace(/\\/+$/, \"\"), this.host = t, this.timeout = n, this.user = r, this.password = i, this.headers = s, this.statusPage = o, this.instance = T.a.create({\n          baseURL: t,\n          timeout: n,\n          headers: s,\n          auth: r && {\n            user: r,\n            password: i\n          }\n        });\n      }\n\n      return y()(e, [{\n        key: \"setStatusPage\",\n        value: function value() {\n          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"/\";\n          this.statusPage = e;\n        }\n      }, {\n        key: \"isConnected\",\n        value: function () {\n          var e = h()(d.a.mark(function e() {\n            var t,\n                n = arguments;\n            return d.a.wrap(function (e) {\n              for (;;) {\n                switch (e.prev = e.next) {\n                  case 0:\n                    return t = n.length > 0 && void 0 !== n[0] ? n[0] : this.statusPage, e.abrupt(\"return\", this.request(t).then(function (e) {\n                      return Ve.hasProperties(e, \"blockID\", \"block_header\");\n                    }).catch(function () {\n                      return !1;\n                    }));\n\n                  case 2:\n                  case \"end\":\n                    return e.stop();\n                }\n              }\n            }, e, this);\n          }));\n          return function () {\n            return e.apply(this, arguments);\n          };\n        }()\n      }, {\n        key: \"request\",\n        value: function value(e) {\n          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n              n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"get\";\n          return n = n.toLowerCase(), this.instance.request({\n            data: \"post\" == n && Object.keys(t).length ? t : null,\n            params: \"get\" == n && t,\n            url: e,\n            method: n\n          }).then(function (e) {\n            return e.data;\n          });\n        }\n      }]), e;\n    }()\n  },\n      Me = n(18),\n      Je = n.n(Me),\n      Ge = n(19),\n      Ye = n(7),\n      Xe = n.n(Ye),\n      Ze = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (g()(this, e), !t || !t instanceof vt) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t;\n    }\n\n    return y()(e, [{\n      key: \"invalid\",\n      value: function value(e) {\n        return e.msg || \"Invalid \".concat(e.name).concat(\"address\" === e.type ? \" address\" : \"\", \" provided\");\n      }\n    }, {\n      key: \"notPositive\",\n      value: function value(e) {\n        return \"\".concat(e.name, \" must be a positive integer\");\n      }\n    }, {\n      key: \"notEqual\",\n      value: function value(e) {\n        return e.msg || \"\".concat(e.names[0], \" can not be equal to \").concat(e.names[1]);\n      }\n    }, {\n      key: \"notValid\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Function(),\n            n = {},\n            r = !1,\n            i = !0,\n            s = !1,\n            o = void 0;\n\n        try {\n          for (var a, u = e[Symbol.iterator](); !(i = (a = u.next()).done); i = !0) {\n            var c = a.value,\n                d = c.name,\n                l = c.names,\n                h = c.value,\n                f = c.type,\n                v = c.gt,\n                p = c.lt,\n                g = c.gte,\n                b = c.lte;\n            c.se;\n\n            if (!c.optional || Ve.isNotNullOrUndefined(h)) {\n              switch (n[c.name] = c.value, f) {\n                case \"address\":\n                  this.tronWeb.isAddress(h) ? n[d] = this.tronWeb.address.toHex(h) : r = !0;\n                  break;\n\n                case \"integer\":\n                  (!Ve.isInteger(h) || \"number\" == typeof v && h <= c.gt || \"number\" == typeof p && h >= c.lt || \"number\" == typeof g && h < c.gte || \"number\" == typeof b && h > c.lte) && (r = !0);\n                  break;\n\n                case \"positive-integer\":\n                  if (!Ve.isInteger(h) || h <= 0) return void t(this.notPositive(c));\n                  break;\n\n                case \"tokenId\":\n                  Ve.isString(h) && h.length || (r = !0);\n                  break;\n\n                case \"notEmptyObject\":\n                  Ve.isObject(h) && Object.keys(h).length || (r = !0);\n                  break;\n\n                case \"notEqual\":\n                  if (n[l[0]] === n[l[1]]) return t(this.notEqual(c)), !0;\n                  break;\n\n                case \"resource\":\n                  [\"BANDWIDTH\", \"ENERGY\"].includes(h) || (r = !0);\n                  break;\n\n                case \"url\":\n                  Ve.isValidURL(h) || (r = !0);\n                  break;\n\n                case \"hex\":\n                  Ve.isHex(h) || (r = !0);\n                  break;\n\n                case \"array\":\n                  Array.isArray(h) || (r = !0);\n                  break;\n\n                case \"not-empty-string\":\n                  Ve.isString(h) && h.length || (r = !0);\n                  break;\n\n                case \"boolean\":\n                  Ve.isBoolean(h) || (r = !0);\n              }\n\n              if (r) return t(this.invalid(c)), !0;\n            }\n          }\n        } catch (e) {\n          s = !0, o = e;\n        } finally {\n          try {\n            i || null == u.return || u.return();\n          } finally {\n            if (s) throw o;\n          }\n        }\n\n        return !1;\n      }\n    }]), e;\n  }();\n\n  function $e(e) {\n    return De.tronWeb.address.toHex(e);\n  }\n\n  function Qe(e) {\n    return De.tronWeb.fromUtf8(e);\n  }\n\n  function et(e, t) {\n    return e.Error ? t(e.Error) : e.result && e.result.message ? t(De.tronWeb.toUtf8(e.result.message)) : t(null, e);\n  }\n\n  var tt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (g()(this, e), !t || !t instanceof vt) throw new Error(\"Expected instance of TronWeb\");\n      De = this, this.tronWeb = t, this.injectPromise = Ve.promiseInjector(this), this.validator = new Ze(t);\n    }\n\n    return y()(e, [{\n      key: \"sendTrx\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.sendTrx, e, t, n);\n        t = parseInt(t), this.validator.notValid([{\n          name: \"recipient\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: n\n        }, {\n          names: [\"recipient\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot transfer TRX to the same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: t\n        }], r) || this.tronWeb.fullNode.request(\"wallet/createtransaction\", {\n          to_address: $e(e),\n          owner_address: $e(n),\n          amount: t\n        }, \"post\").then(function (e) {\n          return et(e, r);\n        }).catch(function (e) {\n          return r(e);\n        });\n      }\n    }, {\n      key: \"sendToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.sendToken, e, t, n, r);\n        t = parseInt(t), this.validator.notValid([{\n          name: \"recipient\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: r\n        }, {\n          names: [\"recipient\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot transfer tokens to the same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: t\n        }, {\n          name: \"token ID\",\n          type: \"tokenId\",\n          value: n\n        }], i) || this.tronWeb.fullNode.request(\"wallet/transferasset\", {\n          to_address: $e(e),\n          owner_address: $e(r),\n          asset_name: Qe(n),\n          amount: parseInt(t)\n        }, \"post\").then(function (e) {\n          return et(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"purchaseToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.purchaseToken, e, t, n, r);\n        this.validator.notValid([{\n          name: \"buyer\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: e\n        }, {\n          names: [\"buyer\", \"issuer\"],\n          type: \"notEqual\",\n          msg: \"Cannot purchase tokens from same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: n\n        }, {\n          name: \"token ID\",\n          type: \"tokenId\",\n          value: t\n        }], i) || this.tronWeb.fullNode.request(\"wallet/participateassetissue\", {\n          to_address: $e(e),\n          owner_address: $e(r),\n          asset_name: Qe(t),\n          amount: parseInt(n)\n        }, \"post\").then(function (e) {\n          return et(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"freezeBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"BANDWIDTH\",\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Ve.isFunction(i) && (s = i, i = void 0), Ve.isFunction(r) && (s = r, r = this.tronWeb.defaultAddress.hex), Ve.isFunction(t) && (s = t, t = 3), Ve.isFunction(n) && (s = n, n = \"BANDWIDTH\"), !s) return this.injectPromise(this.freezeBalance, e, t, n, r, i);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"receiver\",\n          type: \"address\",\n          value: i,\n          optional: !0\n        }, {\n          names: [\"receiver\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot freeze balance to same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: e\n        }, {\n          name: \"duration\",\n          type: \"integer\",\n          gte: 3,\n          value: t\n        }, {\n          name: \"resource\",\n          type: \"resource\",\n          value: n,\n          msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n        }], s)) {\n          var o = {\n            owner_address: $e(r),\n            frozen_balance: parseInt(e),\n            frozen_duration: parseInt(t),\n            resource: n\n          };\n          Ve.isNotNullOrUndefined(i) && (o.receiver_address = $e(i)), this.tronWeb.fullNode.request(\"wallet/freezebalance\", o, \"post\").then(function (e) {\n            return et(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"unfreezeBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"BANDWIDTH\",\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Ve.isFunction(n) && (r = n, n = void 0), Ve.isFunction(t) && (r = t, t = this.tronWeb.defaultAddress.hex), Ve.isFunction(e) && (r = e, e = \"BANDWIDTH\"), !r) return this.injectPromise(this.unfreezeBalance, e, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"receiver\",\n          type: \"address\",\n          value: n,\n          optional: !0\n        }, {\n          names: [\"receiver\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot unfreeze balance to same account\"\n        }, {\n          name: \"resource\",\n          type: \"resource\",\n          value: e,\n          msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n        }], r)) {\n          var i = {\n            owner_address: $e(t),\n            resource: e\n          };\n          Ve.isNotNullOrUndefined(n) && (i.receiver_address = $e(n)), this.tronWeb.fullNode.request(\"wallet/unfreezebalance\", i, \"post\").then(function (e) {\n            return et(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"withdrawBlockRewards\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.withdrawBlockRewards, e);\n        this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: e\n        }], t) || this.tronWeb.fullNode.request(\"wallet/withdrawbalance\", {\n          owner_address: $e(e)\n        }, \"post\").then(function (e) {\n          return et(e, t);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"applyForSR\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isValidURL(e) && (n = t || !1, t = e, e = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.applyForSR, e, t);\n        this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"url\",\n          type: \"url\",\n          value: t,\n          msg: \"Invalid url provided\"\n        }], n) || this.tronWeb.fullNode.request(\"wallet/createwitness\", {\n          owner_address: $e(e),\n          url: Qe(t)\n        }, \"post\").then(function (e) {\n          return et(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"vote\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.vote, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"voter\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"votes\",\n          type: \"notEmptyObject\",\n          value: t\n        }], r)) {\n          var i = !1;\n          t = Object.entries(t).map(function (t) {\n            var n = Xe()(t, 2),\n                r = n[0],\n                s = n[1];\n            if (!i) return e.validator.notValid([{\n              name: \"SR\",\n              type: \"address\",\n              value: r\n            }, {\n              name: \"vote count\",\n              type: \"integer\",\n              gt: 0,\n              value: s,\n              msg: \"Invalid vote count provided for SR: \" + r\n            }]) ? i = !0 : {\n              vote_address: $e(r),\n              vote_count: parseInt(s)\n            };\n          }), i || this.tronWeb.fullNode.request(\"wallet/votewitnessaccount\", {\n            owner_address: $e(n),\n            votes: t\n          }, \"post\").then(function (e) {\n            return et(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"createSmartContract\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createSmartContract, e, t);\n        var r = e.feeLimit || 1e9,\n            i = e.userFeePercentage;\n        \"number\" == typeof i || i || (i = 100);\n        var s = e.originEnergyLimit || 1e7,\n            o = e.callValue || 0,\n            a = e.tokenValue,\n            u = e.tokenId || e.token_id,\n            c = e.abi,\n            d = void 0 !== c && c,\n            l = e.bytecode,\n            h = void 0 !== l && l,\n            f = e.parameters,\n            v = void 0 === f ? [] : f,\n            p = e.name,\n            g = void 0 === p ? \"\" : p;\n        if (d && Ve.isString(d)) try {\n          d = JSON.parse(d);\n        } catch (e) {\n          return n(\"Invalid options.abi provided\");\n        }\n        if (!Ve.isArray(d)) return n(\"Invalid options.abi provided\");\n        var b = d.some(function (e) {\n          return \"constructor\" == e.type && e.payable;\n        });\n\n        if (!this.validator.notValid([{\n          name: \"bytecode\",\n          type: \"hex\",\n          value: h\n        }, {\n          name: \"feeLimit\",\n          type: \"integer\",\n          value: r,\n          gt: 0,\n          lte: 1e9\n        }, {\n          name: \"callValue\",\n          type: \"integer\",\n          value: o,\n          gte: 0\n        }, {\n          name: \"userFeePercentage\",\n          type: \"integer\",\n          value: i,\n          gte: 0,\n          lte: 100\n        }, {\n          name: \"originEnergyLimit\",\n          type: \"integer\",\n          value: i,\n          gte: 0,\n          lte: 1e7\n        }, {\n          name: \"parameters\",\n          type: \"array\",\n          value: v\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"tokenValue\",\n          type: \"integer\",\n          value: a,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"tokenId\",\n          type: \"integer\",\n          value: u,\n          gte: 0,\n          optional: !0\n        }], n)) {\n          if (b && 0 == o && 0 == a) return n(\"When contract is payable, options.callValue or options.tokenValue must be a positive integer\");\n          if (!b && (o > 0 || a > 0)) return n(\"When contract is not payable, options.callValue and options.tokenValue must be 0\");\n          var y = d.find(function (e) {\n            return \"constructor\" === e.type;\n          });\n\n          if (void 0 !== y && y) {\n            var m = new ve(),\n                k = [],\n                x = [];\n            if (y = y.inputs, v.length != y.length) return n(\"constructor needs \".concat(y.length, \" but \").concat(v.length, \" provided\"));\n\n            for (var w = 0; w < v.length; w++) {\n              var W = y[w].type,\n                  A = v[w];\n              if (!W || !Ve.isString(W) || !W.length) return n(\"Invalid parameter type provided: \" + W);\n              \"address\" == W && (A = $e(A).replace(z, \"0x\")), k.push(W), x.push(A);\n            }\n\n            try {\n              v = m.encode(k, x).replace(/^(0x)/, \"\");\n            } catch (e) {\n              return n(e);\n            }\n          } else v = \"\";\n\n          var I = {\n            owner_address: $e(t),\n            fee_limit: parseInt(r),\n            call_value: parseInt(o),\n            consume_user_resource_percent: i,\n            origin_energy_limit: s,\n            abi: JSON.stringify(d),\n            bytecode: h,\n            parameter: v,\n            name: g\n          };\n          Ve.isNotNullOrUndefined(a) && (I.call_token_value = parseInt(a)), Ve.isNotNullOrUndefined(u) && (I.token_id = parseInt(u)), this.tronWeb.fullNode.request(\"wallet/deploycontract\", I, \"post\").then(function (e) {\n            return et(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"triggerSmartContract\",\n      value: function value() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        return \"object\" !== v()(t[2]) && (t[2] = {\n          feeLimit: t[2],\n          callValue: t[3]\n        }, t.splice(3, 1)), this._triggerSmartContract.apply(this, t);\n      }\n    }, {\n      key: \"_triggerSmartContract\",\n      value: function value(e, t) {\n        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [],\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Ve.isFunction(i) && (s = i, i = this.tronWeb.defaultAddress.hex), Ve.isFunction(r) && (s = r, r = []), !s) return this.injectPromise(this._triggerSmartContract, e, t, n, r, i);\n        var o = Object.assign({\n          callValue: 0,\n          feeLimit: 1e9\n        }, n),\n            a = o.tokenValue,\n            u = o.tokenId,\n            c = o.callValue,\n            d = o.feeLimit;\n\n        if (!this.validator.notValid([{\n          name: \"feeLimit\",\n          type: \"integer\",\n          value: d,\n          gt: 0,\n          lte: 1e9\n        }, {\n          name: \"callValue\",\n          type: \"integer\",\n          value: c,\n          gte: 0\n        }, {\n          name: \"parameters\",\n          type: \"array\",\n          value: r\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: i\n        }, {\n          name: \"tokenValue\",\n          type: \"integer\",\n          value: a,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"tokenId\",\n          type: \"integer\",\n          value: u,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"function selector\",\n          type: \"not-empty-string\",\n          value: t\n        }], s)) {\n          if (t = t.replace(\"/s*/g\", \"\"), r.length) {\n            for (var l = new ve(), h = [], f = [], v = 0; v < r.length; v++) {\n              var p = r[v],\n                  g = p.type,\n                  b = p.value;\n              if (!g || !Ve.isString(g) || !g.length) return s(\"Invalid parameter type provided: \" + g);\n              \"address\" == g && (b = $e(b).replace(z, \"0x\")), h.push(g), f.push(b);\n            }\n\n            try {\n              h = h.map(function (e) {\n                return /trcToken/.test(e) && (e = e.replace(/trcToken/, \"uint256\")), e;\n              }), r = l.encode(h, f).replace(/^(0x)/, \"\");\n            } catch (e) {\n              return s(e);\n            }\n          } else r = \"\";\n\n          var y = {\n            contract_address: $e(e),\n            owner_address: $e(i),\n            function_selector: t,\n            fee_limit: parseInt(d),\n            call_value: parseInt(c),\n            parameter: r\n          };\n          Ve.isNotNullOrUndefined(a) && (y.call_token_value = parseInt(a)), Ve.isNotNullOrUndefined(u) && (y.token_id = parseInt(u)), this.tronWeb.fullNode.request(\"wallet/triggersmartcontract\", y, \"post\").then(function (e) {\n            return et(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"createToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createToken, e, t);\n        var r = e.name,\n            i = void 0 !== r && r,\n            s = e.abbreviation,\n            o = void 0 !== s && s,\n            a = e.description,\n            u = void 0 !== a && a,\n            c = e.url,\n            d = void 0 !== c && c,\n            l = e.totalSupply,\n            h = void 0 === l ? 0 : l,\n            f = e.trxRatio,\n            v = void 0 === f ? 1 : f,\n            p = e.tokenRatio,\n            g = void 0 === p ? 1 : p,\n            b = e.saleStart,\n            y = void 0 === b ? Date.now() : b,\n            m = e.saleEnd,\n            k = void 0 !== m && m,\n            x = e.freeBandwidth,\n            w = void 0 === x ? 0 : x,\n            W = e.freeBandwidthLimit,\n            A = void 0 === W ? 0 : W,\n            I = e.frozenAmount,\n            N = void 0 === I ? 0 : I,\n            P = e.frozenDuration,\n            S = void 0 === P ? 0 : P,\n            _ = e.voteScore,\n            T = e.precision;\n\n        if (!this.validator.notValid([{\n          name: \"Supply amount\",\n          type: \"positive-integer\",\n          value: h\n        }, {\n          name: \"TRX ratio\",\n          type: \"positive-integer\",\n          value: v\n        }, {\n          name: \"Token ratio\",\n          type: \"positive-integer\",\n          value: g\n        }, {\n          name: \"token abbreviation\",\n          type: \"not-empty-string\",\n          value: o\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: i\n        }, {\n          name: \"token description\",\n          type: \"not-empty-string\",\n          value: u\n        }, {\n          name: \"token url\",\n          type: \"url\",\n          value: d\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"sale start timestamp\",\n          type: \"integer\",\n          value: y,\n          gte: Date.now()\n        }, {\n          name: \"sale end timestamp\",\n          type: \"integer\",\n          value: k,\n          gt: y\n        }, {\n          name: \"Free bandwidth amount\",\n          type: \"integer\",\n          value: w,\n          gte: 0\n        }, {\n          name: \"Free bandwidth limit\",\n          type: \"integer\",\n          value: A,\n          gte: 0\n        }, {\n          name: \"Frozen supply\",\n          type: \"integer\",\n          value: N,\n          gte: 0\n        }, {\n          name: \"Frozen duration\",\n          type: \"integer\",\n          value: S,\n          gte: 0\n        }], n)) {\n          if (Ve.isNotNullOrUndefined(_) && (!Ve.isInteger(_) || _ <= 0)) return n(\"voteScore must be a positive integer greater than 0\");\n          if (Ve.isNotNullOrUndefined(T) && (!Ve.isInteger(T) || T <= 0 || T > 6)) return n(\"precision must be a positive integer > 0 and <= 6\");\n          var B = {\n            owner_address: $e(t),\n            name: Qe(i),\n            abbr: Qe(o),\n            description: Qe(u),\n            url: Qe(d),\n            total_supply: parseInt(h),\n            trx_num: parseInt(v),\n            num: parseInt(g),\n            start_time: parseInt(y),\n            end_time: parseInt(k),\n            free_asset_net_limit: parseInt(w),\n            public_free_asset_net_limit: parseInt(A),\n            frozen_supply: {\n              frozen_amount: parseInt(N),\n              frozen_days: parseInt(S)\n            }\n          };\n          T && !isNaN(parseInt(T)) && (B.precision = parseInt(T)), _ && !isNaN(parseInt(_)) && (B.vote_score = parseInt(_)), this.tronWeb.fullNode.request(\"wallet/createassetissue\", B, \"post\").then(function (e) {\n            return et(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"updateAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.updateAccount, e, t);\n        this.validator.notValid([{\n          name: \"Name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: t\n        }], n) || this.tronWeb.fullNode.request(\"wallet/updateaccount\", {\n          account_name: Qe(e),\n          owner_address: $e(t)\n        }, \"post\").then(function (e) {\n          return et(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"updateToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.updateToken, e, t);\n        var r = e.description,\n            i = void 0 !== r && r,\n            s = e.url,\n            o = void 0 !== s && s,\n            a = e.freeBandwidth,\n            u = void 0 === a ? 0 : a,\n            c = e.freeBandwidthLimit,\n            d = void 0 === c ? 0 : c;\n        this.validator.notValid([{\n          name: \"token description\",\n          type: \"not-empty-string\",\n          value: i\n        }, {\n          name: \"token url\",\n          type: \"url\",\n          value: o\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"Free bandwidth amount\",\n          type: \"positive-integer\",\n          value: u\n        }, {\n          name: \"Free bandwidth limit\",\n          type: \"positive-integer\",\n          value: d\n        }], n) || this.tronWeb.fullNode.request(\"wallet/updateasset\", {\n          owner_address: $e(t),\n          description: Qe(i),\n          url: Qe(o),\n          new_limit: parseInt(u),\n          new_public_limit: parseInt(d)\n        }, \"post\").then(function (e) {\n          return et(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"sendAsset\",\n      value: function value() {\n        return this.sendToken.apply(this, arguments);\n      }\n    }, {\n      key: \"purchaseAsset\",\n      value: function value() {\n        return this.purchaseToken.apply(this, arguments);\n      }\n    }, {\n      key: \"createAsset\",\n      value: function value() {\n        return this.createToken.apply(this, arguments);\n      }\n    }, {\n      key: \"updateAsset\",\n      value: function value() {\n        return this.updateToken.apply(this, arguments);\n      }\n    }, {\n      key: \"createProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createProposal, e, t);\n\n        if (!this.validator.notValid([{\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }], n)) {\n          var r = \"Invalid proposal parameters provided\";\n          if (!e) return n(r);\n          Ve.isArray(e) || (e = [e]);\n          var i = !0,\n              s = !1,\n              o = void 0;\n\n          try {\n            for (var a, u = e[Symbol.iterator](); !(i = (a = u.next()).done); i = !0) {\n              var c = a.value;\n              if (!Ve.isObject(c)) return n(r);\n            }\n          } catch (e) {\n            s = !0, o = e;\n          } finally {\n            try {\n              i || null == u.return || u.return();\n            } finally {\n              if (s) throw o;\n            }\n          }\n\n          this.tronWeb.fullNode.request(\"wallet/proposalcreate\", {\n            owner_address: $e(t),\n            parameters: e\n          }, \"post\").then(function (e) {\n            return et(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"deleteProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.deleteProposal, e, t);\n        this.validator.notValid([{\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"proposalID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], n) || this.tronWeb.fullNode.request(\"wallet/proposaldelete\", {\n          owner_address: $e(t),\n          proposal_id: parseInt(e)\n        }, \"post\").then(function (e) {\n          return et(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"voteProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.voteProposal, e, t, n);\n        this.validator.notValid([{\n          name: \"voter\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"proposalID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }, {\n          name: \"has approval\",\n          type: \"boolean\",\n          value: t\n        }], r) || this.tronWeb.fullNode.request(\"wallet/proposalapprove\", {\n          owner_address: $e(n),\n          proposal_id: parseInt(e),\n          is_add_approval: t\n        }, \"post\").then(function (e) {\n          return et(e, r);\n        }).catch(function (e) {\n          return r(e);\n        });\n      }\n    }, {\n      key: \"createTRXExchange\",\n      value: function value(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.createTRXExchange, e, t, n, r);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"token balance\",\n          type: \"positive-integer\",\n          value: t\n        }, {\n          name: \"trx balance\",\n          type: \"positive-integer\",\n          value: n\n        }], i) || this.tronWeb.fullNode.request(\"wallet/exchangecreate\", {\n          owner_address: $e(r),\n          first_token_id: Qe(e),\n          first_token_balance: t,\n          second_token_id: \"5f\",\n          second_token_balance: n\n        }, \"post\").then(function (e) {\n          i(null, e);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"createTokenExchange\",\n      value: function value(e, t, n, r) {\n        var i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Ve.isFunction(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.createTokenExchange, e, t, n, r, i);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: i\n        }, {\n          name: \"first token name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"second token name\",\n          type: \"not-empty-string\",\n          value: n\n        }, {\n          name: \"first token balance\",\n          type: \"positive-integer\",\n          value: t\n        }, {\n          name: \"second token balance\",\n          type: \"positive-integer\",\n          value: r\n        }], s) || this.tronWeb.fullNode.request(\"wallet/exchangecreate\", {\n          owner_address: $e(i),\n          first_token_id: Qe(e),\n          first_token_balance: t,\n          second_token_id: Qe(n),\n          second_token_balance: r\n        }, \"post\").then(function (e) {\n          s(null, e);\n        }).catch(function (e) {\n          return s(e);\n        });\n      }\n    }, {\n      key: \"injectExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.injectExchangeTokens, e, t, n, r);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"token amount\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], i) || this.tronWeb.fullNode.request(\"wallet/exchangeinject\", {\n          owner_address: $e(r),\n          exchange_id: parseInt(e),\n          token_id: Qe(t),\n          quant: parseInt(n)\n        }, \"post\").then(function (e) {\n          return et(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"withdrawExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.withdrawExchangeTokens, e, t, n, r);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"token amount\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], i) || this.tronWeb.fullNode.request(\"wallet/exchangewithdraw\", {\n          owner_address: $e(r),\n          exchange_id: parseInt(e),\n          token_id: Qe(t),\n          quant: parseInt(n)\n        }, \"post\").then(function (e) {\n          return et(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"tradeExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Ve.isFunction(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.tradeExchangeTokens, e, t, n, r, i);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: i\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"tokenAmountSold\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"tokenAmountExpected\",\n          type: \"integer\",\n          value: r,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], s) || this.tronWeb.fullNode.request(\"wallet/exchangetransaction\", {\n          owner_address: $e(i),\n          exchange_id: parseInt(e),\n          token_id: this.tronWeb.fromAscii(t),\n          quant: parseInt(n),\n          expected: parseInt(r)\n        }, \"post\").then(function (e) {\n          return et(e, s);\n        }).catch(function (e) {\n          return s(e);\n        });\n      }\n    }, {\n      key: \"updateSetting\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.updateSetting, e, t, n);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"userFeePercentage\",\n          type: \"integer\",\n          value: t,\n          gte: 0,\n          lte: 100\n        }], r) || this.tronWeb.fullNode.request(\"wallet/updatesetting\", {\n          owner_address: $e(n),\n          contract_address: $e(e),\n          consume_user_resource_percent: t\n        }, \"post\").then(function (e) {\n          return et(e, r);\n        }).catch(function (e) {\n          return r(e);\n        });\n      }\n    }, {\n      key: \"updateEnergyLimit\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.updateEnergyLimit, e, t, n);\n        this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"originEnergyLimit\",\n          type: \"integer\",\n          value: t,\n          gte: 0,\n          lte: 1e7\n        }], r) || this.tronWeb.fullNode.request(\"wallet/updateenergylimit\", {\n          owner_address: $e(n),\n          contract_address: $e(e),\n          origin_energy_limit: t\n        }, \"post\").then(function (e) {\n          return et(e, r);\n        }).catch(function (e) {\n          return r(e);\n        });\n      }\n    }, {\n      key: \"checkPermissions\",\n      value: function value(e, t) {\n        if (e) {\n          if (e.type !== t || !e.permission_name || !Ve.isString(e.permission_name) || !Ve.isInteger(e.threshold) || e.threshold < 1 || !e.keys) return !1;\n          var n = !0,\n              r = !1,\n              i = void 0;\n\n          try {\n            for (var s, o = e.keys[Symbol.iterator](); !(n = (s = o.next()).done); n = !0) {\n              var a = s.value;\n              if (!this.tronWeb.isAddress(a.address) || !Ve.isInteger(a.weight) || a.weight > e.threshold || a.weight < 1 || 2 === t && !e.operations) return !1;\n            }\n          } catch (e) {\n            r = !0, i = e;\n          } finally {\n            try {\n              n || null == o.return || o.return();\n            } finally {\n              if (r) throw i;\n            }\n          }\n        }\n\n        return !0;\n      }\n    }, {\n      key: \"updateAccountPermissions\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Ve.isFunction(r) && (i = r, r = !1), Ve.isFunction(n) && (i = n, n = r = !1), Ve.isFunction(t) && (i = t, t = n = r = !1), !i) return this.injectPromise(this.updateAccountPermissions, e, t, n, r);\n        if (!this.tronWeb.isAddress(e)) return i(\"Invalid ownerAddress provided\");\n        if (!this.checkPermissions(t, 0)) return i(\"Invalid ownerPermissions provided\");\n        if (!this.checkPermissions(n, 1)) return i(\"Invalid witnessPermissions provided\");\n        Array.isArray(r) || (r = [r]);\n        var s = !0,\n            o = !1,\n            a = void 0;\n\n        try {\n          for (var u, c = r[Symbol.iterator](); !(s = (u = c.next()).done); s = !0) {\n            var d = u.value;\n            if (!this.checkPermissions(d, 2)) return i(\"Invalid activesPermissions provided\");\n          }\n        } catch (e) {\n          o = !0, a = e;\n        } finally {\n          try {\n            s || null == c.return || c.return();\n          } finally {\n            if (o) throw a;\n          }\n        }\n\n        var l = {\n          owner_address: e\n        };\n        t && (l.owner = t), n && (l.witness = n), r && (l.actives = 1 === r.length ? r[0] : r), this.tronWeb.fullNode.request(\"wallet/accountpermissionupdate\", l, \"post\").then(function (e) {\n          return et(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }]), e;\n  }(),\n      nt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (g()(this, e), !t || !t instanceof vt) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = Ve.promiseInjector(this);\n    }\n\n    return y()(e, [{\n      key: \"_parseToken\",\n      value: function value(e) {\n        return C()({}, e, {\n          name: this.tronWeb.toUtf8(e.name),\n          abbr: e.abbr && this.tronWeb.toUtf8(e.abbr),\n          description: e.description && this.tronWeb.toUtf8(e.description),\n          url: e.url && this.tronWeb.toUtf8(e.url)\n        });\n      }\n    }, {\n      key: \"getCurrentBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request(\"wallet/getnowblock\").then(function (t) {\n          e(null, t);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getConfirmedCurrentBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getConfirmedCurrentBlock);\n        this.tronWeb.solidityNode.request(\"walletsolidity/getnowblock\").then(function (t) {\n          e(null, t);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), t ? !1 === e ? t(\"No block identifier provided\") : (\"earliest\" == e && (e = 0), \"latest\" == e ? this.getCurrentBlock(t) : isNaN(e) && Ve.isHex(e) ? this.getBlockByHash(e, t) : void this.getBlockByNumber(e, t)) : this.injectPromise(this.getBlock, e);\n      }\n    }, {\n      key: \"getBlockByHash\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getBlockByHash, e);\n        this.tronWeb.fullNode.request(\"wallet/getblockbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Block not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBlockByNumber\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Ve.isInteger(e) || e < 0 ? t(\"Invalid block number provided\") : void this.tronWeb.fullNode.request(\"wallet/getblockbynum\", {\n          num: parseInt(e)\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Block not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getBlockByNumber, e);\n      }\n    }, {\n      key: \"getBlockTransactionCount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), !t) return this.injectPromise(this.getBlockTransactionCount, e);\n        this.getBlock(e).then(function (e) {\n          var n = e.transactions;\n          t(null, (void 0 === n ? [] : n).length);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getTransactionFromBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Ve.isFunction(t) && (n = t, t = 0), Ve.isFunction(e) && (n = e, e = this.tronWeb.defaultBlock), n ? !Ve.isInteger(t) || t < 0 ? n(\"Invalid transaction index provided\") : void this.getBlock(e).then(function (e) {\n          var r = e.transactions,\n              i = void 0 !== r && r;\n          if (!i || i.length < t) return n(\"Transaction not found in block\");\n          n(null, i[t]);\n        }).catch(function (e) {\n          return n(e);\n        }) : this.injectPromise(this.getTransactionFromBlock, e, t);\n      }\n    }, {\n      key: \"getTransaction\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getTransaction, e);\n        this.tronWeb.fullNode.request(\"wallet/gettransactionbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Transaction not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getConfirmedTransaction\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getConfirmedTransaction, e);\n        this.tronWeb.solidityNode.request(\"walletsolidity/gettransactionbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Transaction not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getTransactionInfo\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getTransactionInfo, e);\n        this.tronWeb.solidityNode.request(\"walletsolidity/gettransactioninfobyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getTransactionsToAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        return Ve.isFunction(n) && (r = n, n = 0), Ve.isFunction(t) && (r = t, t = 30), r ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRelated(e, \"to\", t, n, r)) : this.injectPromise(this.getTransactionsToAddress, e, t, n);\n      }\n    }, {\n      key: \"getTransactionsFromAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        return Ve.isFunction(n) && (r = n, n = 0), Ve.isFunction(t) && (r = t, t = 30), r ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRelated(e, \"from\", t, n, r)) : this.injectPromise(this.getTransactionsFromAddress, e, t, n);\n      }\n    }, {\n      key: \"getTransactionsRelated\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c,\n              l = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = l.length > 0 && void 0 !== l[0] ? l[0] : this.tronWeb.defaultAddress.hex, n = l.length > 1 && void 0 !== l[1] ? l[1] : \"all\", r = l.length > 2 && void 0 !== l[2] ? l[2] : 30, i = l.length > 3 && void 0 !== l[3] ? l[3] : 0, s = l.length > 4 && void 0 !== l[4] && l[4], Ve.isFunction(i) && (s = i, i = 0), Ve.isFunction(r) && (s = r, r = 30), Ve.isFunction(n) && (s = n, n = \"all\"), Ve.isFunction(t) && (s = t, t = this.tronWeb.defaultAddress.hex), s) {\n                    e.next = 11;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.getTransactionsRelated, t, n, r, i));\n\n                case 11:\n                  if ([\"to\", \"from\", \"all\"].includes(n)) {\n                    e.next = 13;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s('Invalid direction provided: Expected \"to\", \"from\" or \"all\"'));\n\n                case 13:\n                  if (\"all\" != n) {\n                    e.next = 27;\n                    break;\n                  }\n\n                  return e.prev = 14, e.next = 17, Promise.all([this.getTransactionsRelated(t, \"from\", r, i), this.getTransactionsRelated(t, \"to\", r, i)]);\n\n                case 17:\n                  return o = e.sent, a = Xe()(o, 2), u = a[0], c = a[1], e.abrupt(\"return\", s(null, [].concat(R()(u.map(function (e) {\n                    return e.direction = \"from\", e;\n                  })), R()(c.map(function (e) {\n                    return e.direction = \"to\", e;\n                  }))).sort(function (e, t) {\n                    return t.raw_data.timestamp - e.raw_data.timestamp;\n                  })));\n\n                case 24:\n                  return e.prev = 24, e.t0 = e.catch(14), e.abrupt(\"return\", s(e.t0));\n\n                case 27:\n                  if (this.tronWeb.isAddress(t)) {\n                    e.next = 29;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid address provided\"));\n\n                case 29:\n                  if (!(!Ve.isInteger(r) || r < 0 || i && r < 1)) {\n                    e.next = 31;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid limit provided\"));\n\n                case 31:\n                  if (Ve.isInteger(i) && !(i < 0)) {\n                    e.next = 33;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid offset provided\"));\n\n                case 33:\n                  t = this.tronWeb.address.toHex(t), this.tronWeb.solidityNode.request(\"walletextension/gettransactions\".concat(n, \"this\"), {\n                    account: {\n                      address: t\n                    },\n                    offset: i,\n                    limit: r\n                  }, \"post\").then(function (e) {\n                    var t = e.transaction;\n                    s(null, t);\n                  }).catch(function (e) {\n                    return s(e);\n                  });\n\n                case 35:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[14, 24]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"getAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.solidityNode.request(\"walletsolidity/getaccount\", {\n          address: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getAccount, e);\n      }\n    }, {\n      key: \"getBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getBalance, e);\n        this.getAccount(e).then(function (e) {\n          var n = e.balance;\n          t(null, void 0 === n ? 0 : n);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getUnconfirmedAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request(\"wallet/getaccount\", {\n          address: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getUnconfirmedAccount, e);\n      }\n    }, {\n      key: \"getUnconfirmedBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getUnconfirmedBalance, e);\n        this.getUnconfirmedAccount(e).then(function (e) {\n          var n = e.balance;\n          t(null, void 0 === n ? 0 : n);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBandwidth\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Ve.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request(\"wallet/getaccountnet\", {\n          address: e\n        }, \"post\").then(function (e) {\n          var n = e.freeNetUsed,\n              r = void 0 === n ? 0 : n,\n              i = e.freeNetLimit,\n              s = void 0 === i ? 0 : i,\n              o = e.NetUsed,\n              a = void 0 === o ? 0 : o,\n              u = e.NetLimit;\n          t(null, s - r + ((void 0 === u ? 0 : u) - a));\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getBandwidth, e);\n      }\n    }, {\n      key: \"getTokensIssuedByAddress\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Ve.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), n ? this.tronWeb.isAddress(t) ? (t = this.tronWeb.address.toHex(t), void this.tronWeb.fullNode.request(\"wallet/getassetissuebyaccount\", {\n          address: t\n        }, \"post\").then(function (t) {\n          var r = t.assetIssue,\n              i = void 0 !== r && r;\n          if (!i) return n(null, {});\n          var s = i.map(function (t) {\n            return e._parseToken(t);\n          }).reduce(function (e, t) {\n            return e[t.name] = t, e;\n          }, {});\n          n(null, s);\n        }).catch(function (e) {\n          return n(e);\n        })) : n(\"Invalid address provided\") : this.injectPromise(this.getTokensIssuedByAddress, t);\n      }\n    }, {\n      key: \"getTokenFromID\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Ve.isInteger(t) && (t = t.toString()), Ve.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuebyname\", {\n          value: this.tronWeb.fromUtf8(t)\n        }, \"post\").then(function (t) {\n          if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenFromID, t);\n      }\n    }, {\n      key: \"listNodes\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!t) return this.injectPromise(this.listNodes);\n        this.tronWeb.fullNode.request(\"wallet/listnodes\").then(function (n) {\n          var r = n.nodes;\n          t(null, (void 0 === r ? [] : r).map(function (t) {\n            var n = t.address,\n                r = n.host,\n                i = n.port;\n            return \"\".concat(e.tronWeb.toUtf8(r), \":\").concat(i);\n          }));\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBlockRange\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Ve.isFunction(t) && (n = t, t = 30), Ve.isFunction(e) && (n = e, e = 0), n ? !Ve.isInteger(e) || e < 0 ? n(\"Invalid start of range provided\") : !Ve.isInteger(t) || t <= e ? n(\"Invalid end of range provided\") : void this.tronWeb.fullNode.request(\"wallet/getblockbylimitnext\", {\n          startNum: parseInt(e),\n          endNum: parseInt(t) + 1\n        }, \"post\").then(function (e) {\n          var t = e.block;\n          n(null, void 0 === t ? [] : t);\n        }).catch(function (e) {\n          return n(e);\n        }) : this.injectPromise(this.getBlockRange, e, t);\n      }\n    }, {\n      key: \"listSuperRepresentatives\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listSuperRepresentatives);\n        this.tronWeb.fullNode.request(\"wallet/listwitnesses\").then(function (t) {\n          var n = t.witnesses;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"listTokens\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Ve.isFunction(n) && (r = n, n = 0), Ve.isFunction(t) && (r = t, t = 0), r ? !Ve.isInteger(t) || t < 0 || n && t < 1 ? r(\"Invalid limit provided\") : !Ve.isInteger(n) || n < 0 ? r(\"Invalid offset provided\") : t ? void this.tronWeb.fullNode.request(\"wallet/getpaginatedassetissuelist\", {\n          offset: parseInt(n),\n          limit: parseInt(t)\n        }, \"post\").then(function (t) {\n          var n = t.assetIssue;\n          r(null, (void 0 === n ? [] : n).map(function (t) {\n            return e._parseToken(t);\n          }));\n        }).catch(function (e) {\n          return r(e);\n        }) : this.tronWeb.fullNode.request(\"wallet/getassetissuelist\").then(function (t) {\n          var n = t.assetIssue;\n          r(null, (void 0 === n ? [] : n).map(function (t) {\n            return e._parseToken(t);\n          }));\n        }).catch(function (e) {\n          return r(e);\n        }) : this.injectPromise(this.listTokens, t, n);\n      }\n    }, {\n      key: \"timeUntilNextVoteCycle\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.timeUntilNextVoteCycle);\n        this.tronWeb.fullNode.request(\"wallet/getnextmaintenancetime\").then(function (t) {\n          var n = t.num,\n              r = void 0 === n ? -1 : n;\n          if (-1 == r) return e(\"Failed to get time until next vote cycle\");\n          e(null, Math.floor(r / 1e3));\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getContract\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request(\"wallet/getcontract\", {\n          value: e\n        }).then(function (e) {\n          if (e.Error) return t(\"Contract does not exist\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid contract address provided\") : this.injectPromise(this.getContract, e);\n      }\n    }, {\n      key: \"verifyMessage\",\n      value: function () {\n        var t = h()(d.a.mark(function t() {\n          var n,\n              r,\n              i,\n              s,\n              o,\n              a = arguments;\n          return d.a.wrap(function (t) {\n            for (;;) {\n              switch (t.prev = t.next) {\n                case 0:\n                  if (n = a.length > 0 && void 0 !== a[0] && a[0], r = a.length > 1 && void 0 !== a[1] && a[1], i = a.length > 2 && void 0 !== a[2] ? a[2] : this.tronWeb.defaultAddress.base58, s = !(a.length > 3 && void 0 !== a[3]) || a[3], o = a.length > 4 && void 0 !== a[4] && a[4], Ve.isFunction(i) && (o = i, i = this.tronWeb.defaultAddress.base58, s = !0), Ve.isFunction(s) && (o = s, s = !0), o) {\n                    t.next = 9;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", this.injectPromise(this.verifyMessage, n, r, i, s));\n\n                case 9:\n                  if (Ve.isHex(n)) {\n                    t.next = 11;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(\"Expected hex message input\"));\n\n                case 11:\n                  if (!e.verifySignature(n, i, r, s)) {\n                    t.next = 13;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(null, !0));\n\n                case 13:\n                  o(\"Signature does not match\");\n\n                case 14:\n                case \"end\":\n                  return t.stop();\n              }\n            }\n          }, t, this);\n        }));\n        return function () {\n          return t.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"sign\",\n      value: function () {\n        var t = h()(d.a.mark(function t() {\n          var n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u = arguments;\n          return d.a.wrap(function (t) {\n            for (;;) {\n              switch (t.prev = t.next) {\n                case 0:\n                  if (n = u.length > 0 && void 0 !== u[0] && u[0], r = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, i = !(u.length > 2 && void 0 !== u[2]) || u[2], s = u.length > 3 && void 0 !== u[3] && u[3], o = u.length > 4 && void 0 !== u[4] && u[4], Ve.isFunction(s) && (o = s, s = !1), Ve.isFunction(i) && (o = i, i = !0, s = !1), Ve.isFunction(r) && (o = r, r = this.tronWeb.defaultPrivateKey, i = !0, s = !1), o) {\n                    t.next = 10;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", this.injectPromise(this.sign, n, r, i, s));\n\n                case 10:\n                  if (!Ve.isString(n)) {\n                    t.next = 21;\n                    break;\n                  }\n\n                  if (Ve.isHex(n)) {\n                    t.next = 13;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(\"Expected hex message input\"));\n\n                case 13:\n                  return t.prev = 13, a = e.signString(n, r, i), t.abrupt(\"return\", o(null, a));\n\n                case 18:\n                  t.prev = 18, t.t0 = t.catch(13), o(t.t0);\n\n                case 21:\n                  if (Ve.isObject(n)) {\n                    t.next = 23;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(\"Invalid transaction provided\"));\n\n                case 23:\n                  if (s || !n.signature) {\n                    t.next = 25;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(\"Transaction is already signed\"));\n\n                case 25:\n                  if (t.prev = 25, s) {\n                    t.next = 30;\n                    break;\n                  }\n\n                  if (this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(r)).toLowerCase() === n.raw_data.contract[0].parameter.value.owner_address.toLowerCase()) {\n                    t.next = 30;\n                    break;\n                  }\n\n                  return t.abrupt(\"return\", o(\"Private key does not match address in transaction\"));\n\n                case 30:\n                  return t.abrupt(\"return\", o(null, Ve.crypto.signTransaction(r, n)));\n\n                case 33:\n                  t.prev = 33, t.t1 = t.catch(25), o(t.t1);\n\n                case 36:\n                case \"end\":\n                  return t.stop();\n              }\n            }\n          }, t, this, [[13, 18], [25, 33]]);\n        }));\n        return function () {\n          return t.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"multiSign\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = u.length > 0 && void 0 !== u[0] && u[0], n = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, r = u.length > 2 && void 0 !== u[2] && u[2], i = u.length > 3 && void 0 !== u[3] && u[3], Ve.isFunction(r) && (i = r, r = 0), Ve.isFunction(n) && (i = n, n = this.tronWeb.defaultPrivateKey, r = 0), i) {\n                    e.next = 8;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.multiSign, t, n, r));\n\n                case 8:\n                  if (Ve.isObject(t) && t.raw_data && t.raw_data.contract) {\n                    e.next = 10;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Invalid transaction provided\"));\n\n                case 10:\n                  return t.raw_data.contract[0].Permission_id = r, s = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(n)).toLowerCase(), e.next = 14, this.getSignWeight(t, r);\n\n                case 14:\n                  if (\"PERMISSION_ERROR\" !== (o = e.sent).result.code) {\n                    e.next = 17;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(o.result.message));\n\n                case 17:\n                  if (a = !1, o.permission.keys.map(function (e) {\n                    e.address === s && (a = !0);\n                  }), a) {\n                    e.next = 21;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(n + \" has no permission to sign\"));\n\n                case 21:\n                  if (!o.approved_list || -1 == o.approved_list.indexOf(s)) {\n                    e.next = 23;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(n + \" already sign transaction\"));\n\n                case 23:\n                  if (!o.transaction || !o.transaction.transaction) {\n                    e.next = 28;\n                    break;\n                  }\n\n                  (t = o.transaction.transaction).raw_data.contract[0].Permission_id = r, e.next = 29;\n                  break;\n\n                case 28:\n                  return e.abrupt(\"return\", i(\"Invalid transaction provided\"));\n\n                case 29:\n                  return e.prev = 29, e.abrupt(\"return\", i(null, Ve.crypto.signTransaction(n, t)));\n\n                case 33:\n                  e.prev = 33, e.t0 = e.catch(29), i(e.t0);\n\n                case 36:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[29, 33]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"getApprovedList\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t) {\n          var n,\n              r = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (n = r.length > 1 && void 0 !== r[1] && r[1]) {\n                    e.next = 3;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.getApprovedList, t));\n\n                case 3:\n                  if (Ve.isObject(t)) {\n                    e.next = 5;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"Invalid transaction provided\"));\n\n                case 5:\n                  this.tronWeb.fullNode.request(\"wallet/getapprovedlist\", t, \"post\").then(function (e) {\n                    n(null, e);\n                  }).catch(function (e) {\n                    return n(e);\n                  });\n\n                case 6:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function (t) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"getSignWeight\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t, n) {\n          var r,\n              i = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (r = i.length > 2 && void 0 !== i[2] && i[2], Ve.isFunction(n) && (r = n, n = void 0), r) {\n                    e.next = 4;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.getSignWeight, t, n));\n\n                case 4:\n                  if (Ve.isObject(t) && t.raw_data && t.raw_data.contract) {\n                    e.next = 6;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", r(\"Invalid transaction provided\"));\n\n                case 6:\n                  if (Ve.isInteger(n) ? t.raw_data.contract[0].Permission_id = parseInt(n) : \"number\" != typeof t.raw_data.contract[0].Permission_id && (t.raw_data.contract[0].Permission_id = 0), Ve.isObject(t)) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", r(\"Invalid transaction provided\"));\n\n                case 9:\n                  this.tronWeb.fullNode.request(\"wallet/getsignweight\", t, \"post\").then(function (e) {\n                    r(null, e);\n                  }).catch(function (e) {\n                    return r(e);\n                  });\n\n                case 10:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function (t, n) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"sendRawTransaction\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Ve.isFunction(t) && (n = t, t = {}), n ? Ve.isObject(e) ? Ve.isObject(t) ? e.signature && Ve.isArray(e.signature) ? void this.tronWeb.fullNode.request(\"wallet/broadcasttransaction\", e, \"post\").then(function (t) {\n          t.result && (t.transaction = e), n(null, t);\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Transaction is not signed\") : n(\"Invalid options provided\") : n(\"Invalid transaction provided\") : this.injectPromise(this.sendRawTransaction, e, t);\n      }\n    }, {\n      key: \"sendTransaction\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = c.length > 0 && void 0 !== c[0] && c[0], n = c.length > 1 && void 0 !== c[1] && c[1], r = c.length > 2 && void 0 !== c[2] ? c[2] : {}, i = c.length > 3 && void 0 !== c[3] && c[3], Ve.isFunction(r) && (i = r, r = {}), \"string\" == typeof r && (r = {\n                    privateKey: r\n                  }), i) {\n                    e.next = 8;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.sendTransaction, t, n, r));\n\n                case 8:\n                  if (this.tronWeb.isAddress(t)) {\n                    e.next = 10;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Invalid recipient provided\"));\n\n                case 10:\n                  if (Ve.isInteger(n) && !(n <= 0)) {\n                    e.next = 12;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Invalid amount provided\"));\n\n                case 12:\n                  if ((r = C()({\n                    privateKey: this.tronWeb.defaultPrivateKey,\n                    address: this.tronWeb.defaultAddress.hex\n                  }, r)).privateKey || r.address) {\n                    e.next = 15;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Function requires either a private key or address to be set\"));\n\n                case 15:\n                  return e.prev = 15, s = r.privateKey ? this.tronWeb.address.fromPrivateKey(r.privateKey) : r.address, e.next = 19, this.tronWeb.transactionBuilder.sendTrx(t, n, s);\n\n                case 19:\n                  return o = e.sent, e.next = 22, this.sign(o, r.privateKey || void 0);\n\n                case 22:\n                  return a = e.sent, e.next = 25, this.sendRawTransaction(a);\n\n                case 25:\n                  return u = e.sent, e.abrupt(\"return\", i(null, u));\n\n                case 29:\n                  return e.prev = 29, e.t0 = e.catch(15), e.abrupt(\"return\", i(e.t0));\n\n                case 32:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[15, 29]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"sendToken\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c,\n              l = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = l.length > 0 && void 0 !== l[0] && l[0], n = l.length > 1 && void 0 !== l[1] && l[1], r = l.length > 2 && void 0 !== l[2] && l[2], i = l.length > 3 && void 0 !== l[3] ? l[3] : {}, s = l.length > 4 && void 0 !== l[4] && l[4], Ve.isFunction(i) && (s = i, i = {}), \"string\" == typeof i && (i = {\n                    privateKey: i\n                  }), s) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.sendToken, t, n, r, i));\n\n                case 9:\n                  if (this.tronWeb.isAddress(t)) {\n                    e.next = 11;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid recipient provided\"));\n\n                case 11:\n                  if (Ve.isInteger(n) && !(n <= 0)) {\n                    e.next = 13;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid amount provided\"));\n\n                case 13:\n                  if (Ve.isInteger(r) && (r = r.toString()), Ve.isString(r)) {\n                    e.next = 16;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Invalid token ID provided\"));\n\n                case 16:\n                  if ((i = C()({\n                    privateKey: this.tronWeb.defaultPrivateKey,\n                    address: this.tronWeb.defaultAddress.hex\n                  }, i)).privateKey || i.address) {\n                    e.next = 19;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Function requires either a private key or address to be set\"));\n\n                case 19:\n                  return e.prev = 19, o = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 23, this.tronWeb.transactionBuilder.sendToken(t, n, r, o);\n\n                case 23:\n                  return a = e.sent, e.next = 26, this.sign(a, i.privateKey || void 0);\n\n                case 26:\n                  return u = e.sent, e.next = 29, this.sendRawTransaction(u);\n\n                case 29:\n                  return c = e.sent, e.abrupt(\"return\", s(null, c));\n\n                case 33:\n                  return e.prev = 33, e.t0 = e.catch(19), e.abrupt(\"return\", s(e.t0));\n\n                case 36:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[19, 33]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"freezeBalance\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c,\n              l,\n              h = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = h.length > 0 && void 0 !== h[0] ? h[0] : 0, n = h.length > 1 && void 0 !== h[1] ? h[1] : 3, r = h.length > 2 && void 0 !== h[2] ? h[2] : \"BANDWIDTH\", i = h.length > 3 && void 0 !== h[3] ? h[3] : {}, s = h.length > 4 && void 0 !== h[4] ? h[4] : void 0, o = h.length > 5 && void 0 !== h[5] && h[5], Ve.isFunction(s) && (o = s, s = void 0), Ve.isFunction(n) && (o = n, n = 3), Ve.isFunction(r) && (o = r, r = \"BANDWIDTH\"), Ve.isFunction(i) && (o = i, i = {}), \"string\" == typeof i && (i = {\n                    privateKey: i\n                  }), o) {\n                    e.next = 13;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.freezeBalance, t, n, r, i, s));\n\n                case 13:\n                  if ([\"BANDWIDTH\", \"ENERGY\"].includes(r)) {\n                    e.next = 15;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", o('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"'));\n\n                case 15:\n                  if (Ve.isInteger(t) && !(t <= 0)) {\n                    e.next = 17;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", o(\"Invalid amount provided\"));\n\n                case 17:\n                  if (Ve.isInteger(n) && !(n < 3)) {\n                    e.next = 19;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", o(\"Invalid duration provided, minimum of 3 days\"));\n\n                case 19:\n                  if ((i = C()({\n                    privateKey: this.tronWeb.defaultPrivateKey,\n                    address: this.tronWeb.defaultAddress.hex\n                  }, i)).privateKey || i.address) {\n                    e.next = 22;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", o(\"Function requires either a private key or address to be set\"));\n\n                case 22:\n                  return e.prev = 22, a = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 26, this.tronWeb.transactionBuilder.freezeBalance(t, n, r, a, s);\n\n                case 26:\n                  return u = e.sent, e.next = 29, this.sign(u, i.privateKey || void 0);\n\n                case 29:\n                  return c = e.sent, e.next = 32, this.sendRawTransaction(c);\n\n                case 32:\n                  return l = e.sent, e.abrupt(\"return\", o(null, l));\n\n                case 36:\n                  return e.prev = 36, e.t0 = e.catch(22), e.abrupt(\"return\", o(e.t0));\n\n                case 39:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[22, 36]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"unfreezeBalance\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = c.length > 0 && void 0 !== c[0] ? c[0] : \"BANDWIDTH\", n = c.length > 1 && void 0 !== c[1] ? c[1] : {}, r = c.length > 2 && void 0 !== c[2] ? c[2] : void 0, i = c.length > 3 && void 0 !== c[3] && c[3], Ve.isFunction(r) && (i = r, r = void 0), Ve.isFunction(t) && (i = t, t = \"BANDWIDTH\"), Ve.isFunction(n) && (i = n, n = {}), \"string\" == typeof n && (n = {\n                    privateKey: n\n                  }), i) {\n                    e.next = 10;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.unfreezeBalance, t, n, r));\n\n                case 10:\n                  if ([\"BANDWIDTH\", \"ENERGY\"].includes(t)) {\n                    e.next = 12;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"'));\n\n                case 12:\n                  if ((n = C()({\n                    privateKey: this.tronWeb.defaultPrivateKey,\n                    address: this.tronWeb.defaultAddress.hex\n                  }, n)).privateKey || n.address) {\n                    e.next = 15;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Function requires either a private key or address to be set\"));\n\n                case 15:\n                  return e.prev = 15, s = n.privateKey ? this.tronWeb.address.fromPrivateKey(n.privateKey) : n.address, e.next = 19, this.tronWeb.transactionBuilder.unfreezeBalance(t, s, r);\n\n                case 19:\n                  return o = e.sent, e.next = 22, this.sign(o, n.privateKey || void 0);\n\n                case 22:\n                  return a = e.sent, e.next = 25, this.sendRawTransaction(a);\n\n                case 25:\n                  return u = e.sent, e.abrupt(\"return\", i(null, u));\n\n                case 29:\n                  return e.prev = 29, e.t0 = e.catch(15), e.abrupt(\"return\", i(e.t0));\n\n                case 32:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[15, 29]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"updateAccount\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = u.length > 0 && void 0 !== u[0] && u[0], n = u.length > 1 && void 0 !== u[1] ? u[1] : {}, r = u.length > 2 && void 0 !== u[2] && u[2], Ve.isFunction(n) && (r = n, n = {}), \"string\" == typeof n && (n = {\n                    privateKey: n\n                  }), r) {\n                    e.next = 7;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.updateAccount, t, n));\n\n                case 7:\n                  if (Ve.isString(t) && t.length) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", r(\"Name must be a string\"));\n\n                case 9:\n                  if ((n = C()({\n                    privateKey: this.tronWeb.defaultPrivateKey,\n                    address: this.tronWeb.defaultAddress.hex\n                  }, n)).privateKey || n.address) {\n                    e.next = 12;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", r(\"Function requires either a private key or address to be set\"));\n\n                case 12:\n                  return e.prev = 12, i = n.privateKey ? this.tronWeb.address.fromPrivateKey(n.privateKey) : n.address, e.next = 16, this.tronWeb.transactionBuilder.updateAccount(t, i);\n\n                case 16:\n                  return s = e.sent, e.next = 19, this.sign(s, n.privateKey || void 0);\n\n                case 19:\n                  return o = e.sent, e.next = 22, this.sendRawTransaction(o);\n\n                case 22:\n                  return a = e.sent, e.abrupt(\"return\", r(null, a));\n\n                case 26:\n                  return e.prev = 26, e.t0 = e.catch(12), e.abrupt(\"return\", r(e.t0));\n\n                case 29:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[12, 26]]);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"signMessage\",\n      value: function value() {\n        return this.sign.apply(this, arguments);\n      }\n    }, {\n      key: \"sendAsset\",\n      value: function value() {\n        return this.sendToken.apply(this, arguments);\n      }\n    }, {\n      key: \"send\",\n      value: function value() {\n        return this.sendTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"sendTrx\",\n      value: function value() {\n        return this.sendTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"broadcast\",\n      value: function value() {\n        return this.sendRawTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"signTransaction\",\n      value: function value() {\n        return this.sign.apply(this, arguments);\n      }\n    }, {\n      key: \"getProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Ve.isInteger(e) || e < 0 ? t(\"Invalid proposalID provided\") : void this.tronWeb.fullNode.request(\"wallet/getproposalbyid\", {\n          id: parseInt(e)\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getProposal, e);\n      }\n    }, {\n      key: \"listProposals\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listProposals);\n        this.tronWeb.fullNode.request(\"wallet/listproposals\", {}, \"post\").then(function (t) {\n          var n = t.proposals;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getChainParameters\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getChainParameters);\n        this.tronWeb.fullNode.request(\"wallet/getchainparameters\", {}, \"post\").then(function (t) {\n          var n = t.chainParameter;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getAccountResources\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? this.tronWeb.isAddress(e) ? void this.tronWeb.fullNode.request(\"wallet/getaccountresource\", {\n          address: this.tronWeb.address.toHex(e)\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : t(\"Invalid address provided\") : this.injectPromise(this.getAccountResources, e);\n      }\n    }, {\n      key: \"getExchangeByID\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Ve.isInteger(e) || e < 0 ? t(\"Invalid exchangeID provided\") : void this.tronWeb.fullNode.request(\"wallet/getexchangebyid\", {\n          id: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getExchangeByID, e);\n      }\n    }, {\n      key: \"listExchanges\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listExchanges);\n        this.tronWeb.fullNode.request(\"wallet/listexchanges\", {}, \"post\").then(function (t) {\n          var n = t.exchanges;\n          e(null, void 0 === n ? [] : n);\n        }, \"post\").catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"listExchangesPaginated\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Ve.isFunction(t) && (n = t, t = 0), Ve.isFunction(e) && (n = e, e = 30), !n) return this.injectPromise(this.listExchanges);\n        this.tronWeb.fullNode.request(\"wallet/listexchangespaginated\", {\n          limit: e,\n          offset: t\n        }, \"post\").then(function (e) {\n          var t = e.exchanges;\n          n(null, void 0 === t ? [] : t);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"getNodeInfo\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getNodeInfo);\n        this.tronWeb.fullNode.request(\"wallet/getnodeinfo\", {}, \"post\").then(function (t) {\n          e(null, t);\n        }, \"post\").catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getTokenListByName\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Ve.isInteger(t) && (t = t.toString()), Ve.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuelistbyname\", {\n          value: this.tronWeb.fromUtf8(t)\n        }, \"post\").then(function (t) {\n          if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenListByName, t);\n      }\n    }, {\n      key: \"getTokenByID\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Ve.isInteger(t) && (t = t.toString()), Ve.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuebyid\", {\n          value: t\n        }, \"post\").then(function (t) {\n          if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenByID, t);\n      }\n    }], [{\n      key: \"verifySignature\",\n      value: function value(e, t, n) {\n        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];\n        e = e.replace(/^0x/, \"\"), n = n.replace(/^0x/, \"\");\n        var i = [].concat(R()(le(r ? \"\u0019TRON Signed Message:\\n32\" : \"\u0019Ethereum Signed Message:\\n32\")), R()(Ve.code.hexStr2byteArray(e))),\n            s = ce(i),\n            o = he(s, {\n          recoveryParam: \"1c\" == n.substring(128, 130) ? 1 : 0,\n          r: \"0x\" + n.substring(0, 64),\n          s: \"0x\" + n.substring(64, 128)\n        }),\n            a = U + o.substr(2);\n        return vt.address.fromHex(a) == vt.address.fromHex(t);\n      }\n    }, {\n      key: \"signString\",\n      value: function value(e, t) {\n        var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n        e = e.replace(/^0x/, \"\");\n        var r = new fe(t),\n            i = [].concat(R()(le(n ? \"\u0019TRON Signed Message:\\n32\" : \"\u0019Ethereum Signed Message:\\n32\")), R()(Ve.code.hexStr2byteArray(e))),\n            s = ce(i),\n            o = r.signDigest(s);\n        return [\"0x\", o.r.substring(2), o.s.substring(2), Number(o.v).toString(16)].join(\"\");\n      }\n    }]), e;\n  }(),\n      rt = function rt(e) {\n    return e.name + \"(\" + it(e.inputs || []).join(\",\") + \")\";\n  },\n      it = function it(e) {\n    return e.map(function (e) {\n      return e.type;\n    });\n  },\n      st = function st(e, t) {\n    var n = e.map(function (e) {\n      return e.name;\n    }).filter(function (e) {\n      return !!e;\n    }),\n        r = e.map(function (e) {\n      return e.type;\n    });\n    return Ve.abi.decodeParams(n, r, t);\n  },\n      ot = function () {\n    function e(t, n) {\n      g()(this, e), this.tronWeb = t.tronWeb, this.contract = t, this.abi = n, this.name = n.name || (n.name = n.type), this.inputs = n.inputs || [], this.outputs = n.outputs || [], this.functionSelector = rt(n), this.signature = this.tronWeb.sha3(this.functionSelector, !1).slice(0, 8), this.injectPromise = Ve.promiseInjector(this), this.defaultOptions = {\n        feeLimit: 1e9,\n        callValue: 0,\n        userFeePercentage: 100,\n        shouldPollResponse: !1\n      };\n    }\n\n    return y()(e, [{\n      key: \"decodeInput\",\n      value: function value(e) {\n        return st(this.inputs, \"0x\" + e);\n      }\n    }, {\n      key: \"onMethod\",\n      value: function value() {\n        for (var e = this, t = arguments.length, n = new Array(t), r = 0; r < t; r++) {\n          n[r] = arguments[r];\n        }\n\n        var i = it(this.inputs);\n        return n.forEach(function (t, r) {\n          \"address\" == i[r] && (n[r] = e.tronWeb.address.toHex(t).replace(z, \"0x\")), \"address[]\" == i[r] && (n[r] = n[r].map(function (t) {\n            return e.tronWeb.address.toHex(t).replace(z, \"0x\");\n          }));\n        }), {\n          call: function call() {\n            for (var t = arguments.length, r = new Array(t), s = 0; s < t; s++) {\n              r[s] = arguments[s];\n            }\n\n            return e._call.apply(e, [i, n].concat(r));\n          },\n          send: function send() {\n            for (var t = arguments.length, r = new Array(t), s = 0; s < t; s++) {\n              r[s] = arguments[s];\n            }\n\n            return e._send.apply(e, [i, n].concat(r));\n          },\n          watch: function watch() {\n            return e._watch.apply(e, arguments);\n          }\n        };\n      }\n    }, {\n      key: \"_call\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t, n) {\n          var r,\n              i,\n              s,\n              o,\n              a = this,\n              u = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (r = u.length > 2 && void 0 !== u[2] ? u[2] : {}, i = u.length > 3 && void 0 !== u[3] && u[3], Ve.isFunction(r) && (i = r, r = {}), i) {\n                    e.next = 5;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this._call, t, n, r));\n\n                case 5:\n                  if (t.length === n.length) {\n                    e.next = 7;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Invalid argument count provided\"));\n\n                case 7:\n                  if (this.contract.address) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Smart contract is missing address\"));\n\n                case 9:\n                  if (this.contract.deployed) {\n                    e.next = 11;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i(\"Calling smart contracts requires you to load the contract first\"));\n\n                case 11:\n                  if (s = this.abi.stateMutability, [\"pure\", \"view\"].includes(s.toLowerCase())) {\n                    e.next = 14;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", i('Methods with state mutability \"'.concat(s, '\" must use send()')));\n\n                case 14:\n                  r = C()({}, this.defaultOptions, {\n                    from: this.tronWeb.defaultAddress.hex\n                  }, r), o = n.map(function (e, n) {\n                    return {\n                      type: t[n],\n                      value: e\n                    };\n                  }), this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, r, o, !!r.from && this.tronWeb.address.toHex(r.from), function (e, t) {\n                    if (e) return i(e);\n                    if (!Ve.hasProperty(t, \"constant_result\")) return i(\"Failed to execute\");\n\n                    try {\n                      var n = t.constant_result[0].length;\n\n                      if (0 === n || n % 64 == 8) {\n                        var r = \"The call has been reverted or has thrown an error.\";\n\n                        if (0 !== n) {\n                          r += \" Error message: \";\n\n                          for (var s = \"\", o = t.constant_result[0].substring(8), u = 0; u < n - 8; u += 64) {\n                            s += a.tronWeb.toUtf8(o.substring(u, u + 64));\n                          }\n\n                          r += s.replace(/(\\u0000|\\u000b|\\f)+/g, \" \").replace(/ +/g, \" \").replace(/\\s+$/g, \"\");\n                        }\n\n                        return i(r);\n                      }\n\n                      var c = st(a.outputs, \"0x\" + t.constant_result[0]);\n                      return 1 === c.length && (c = c[0]), i(null, c);\n                    } catch (e) {\n                      return i(e);\n                    }\n                  });\n\n                case 17:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function (t, n) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"_send\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t, n) {\n          var r,\n              i,\n              s,\n              o,\n              a,\n              u,\n              c,\n              l,\n              f,\n              v,\n              p = this,\n              g = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (r = g.length > 2 && void 0 !== g[2] ? g[2] : {}, i = g.length > 3 && void 0 !== g[3] ? g[3] : this.tronWeb.defaultPrivateKey, s = g.length > 4 && void 0 !== g[4] && g[4], Ve.isFunction(i) && (s = i, i = this.tronWeb.defaultPrivateKey), Ve.isFunction(r) && (s = r, r = {}), s) {\n                    e.next = 7;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this._send, t, n, r, i));\n\n                case 7:\n                  if (t.length === n.length) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  throw new Error(\"Invalid argument count provided\");\n\n                case 9:\n                  if (this.contract.address) {\n                    e.next = 11;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Smart contract is missing address\"));\n\n                case 11:\n                  if (this.contract.deployed) {\n                    e.next = 13;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Calling smart contracts requires you to load the contract first\"));\n\n                case 13:\n                  if (o = this.abi.stateMutability, ![\"pure\", \"view\"].includes(o.toLowerCase())) {\n                    e.next = 16;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s('Methods with state mutability \"'.concat(o, '\" must use call()')));\n\n                case 16:\n                  return [\"payable\"].includes(o.toLowerCase()) || (r.callValue = 0), r = C()({}, this.defaultOptions, {\n                    from: this.tronWeb.defaultAddress.hex\n                  }, r), a = n.map(function (e, n) {\n                    return {\n                      type: t[n],\n                      value: e\n                    };\n                  }), e.prev = 19, u = i ? this.tronWeb.address.fromPrivateKey(i) : this.tronWeb.defaultAddress.base58, e.next = 23, this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, r, a, this.tronWeb.address.toHex(u));\n\n                case 23:\n                  if ((c = e.sent).result && c.result.result) {\n                    e.next = 26;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Unknown error: \" + JSON.stringify(c, null, 2)));\n\n                case 26:\n                  return e.next = 28, this.tronWeb.trx.sign(c.transaction, i);\n\n                case 28:\n                  if ((l = e.sent).signature) {\n                    e.next = 33;\n                    break;\n                  }\n\n                  if (i) {\n                    e.next = 32;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(\"Transaction was not signed properly\"));\n\n                case 32:\n                  return e.abrupt(\"return\", s(\"Invalid private key provided\"));\n\n                case 33:\n                  return e.next = 35, this.tronWeb.trx.sendRawTransaction(l);\n\n                case 35:\n                  if (!(f = e.sent).code) {\n                    e.next = 38;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s({\n                    error: f.code,\n                    message: this.tronWeb.toUtf8(f.message)\n                  }));\n\n                case 38:\n                  if (r.shouldPollResponse) {\n                    e.next = 40;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", s(null, l.txID));\n\n                case 40:\n                  (v = function () {\n                    var e = h()(d.a.mark(function e() {\n                      var t,\n                          n,\n                          i,\n                          o = arguments;\n                      return d.a.wrap(function (e) {\n                        for (;;) {\n                          switch (e.prev = e.next) {\n                            case 0:\n                              if (20 != (t = o.length > 0 && void 0 !== o[0] ? o[0] : 0)) {\n                                e.next = 3;\n                                break;\n                              }\n\n                              return e.abrupt(\"return\", s({\n                                error: \"Cannot find result in solidity node\",\n                                transaction: l\n                              }));\n\n                            case 3:\n                              return e.next = 5, p.tronWeb.trx.getTransactionInfo(l.txID);\n\n                            case 5:\n                              if (n = e.sent, Object.keys(n).length) {\n                                e.next = 8;\n                                break;\n                              }\n\n                              return e.abrupt(\"return\", setTimeout(function () {\n                                v(t + 1);\n                              }, 3e3));\n\n                            case 8:\n                              if (!n.result || \"FAILED\" != n.result) {\n                                e.next = 10;\n                                break;\n                              }\n\n                              return e.abrupt(\"return\", s({\n                                error: p.tronWeb.toUtf8(n.resMessage),\n                                transaction: l,\n                                output: n\n                              }));\n\n                            case 10:\n                              if (Ve.hasProperty(n, \"contractResult\")) {\n                                e.next = 12;\n                                break;\n                              }\n\n                              return e.abrupt(\"return\", s({\n                                error: \"Failed to execute: \" + JSON.stringify(n, null, 2),\n                                transaction: l,\n                                output: n\n                              }));\n\n                            case 12:\n                              if (!r.rawResponse) {\n                                e.next = 14;\n                                break;\n                              }\n\n                              return e.abrupt(\"return\", s(null, n));\n\n                            case 14:\n                              return 1 === (i = st(p.outputs, \"0x\" + n.contractResult[0])).length && (i = i[0]), e.abrupt(\"return\", s(null, i));\n\n                            case 17:\n                            case \"end\":\n                              return e.stop();\n                          }\n                        }\n                      }, e);\n                    }));\n                    return function () {\n                      return e.apply(this, arguments);\n                    };\n                  }())(), e.next = 47;\n                  break;\n\n                case 44:\n                  return e.prev = 44, e.t0 = e.catch(19), e.abrupt(\"return\", s(e.t0));\n\n                case 47:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[19, 44]]);\n        }));\n        return function (t, n) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"_watch\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u = this,\n              c = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = c.length > 0 && void 0 !== c[0] ? c[0] : {}, n = c.length > 1 && void 0 !== c[1] && c[1], Ve.isFunction(t) && (n = t, t = {}), Ve.isFunction(n)) {\n                    e.next = 5;\n                    break;\n                  }\n\n                  throw new Error(\"Expected callback to be provided\");\n\n                case 5:\n                  if (this.contract.address) {\n                    e.next = 7;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"Smart contract is missing address\"));\n\n                case 7:\n                  if (this.abi.type && /event/i.test(this.abi.type)) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"Invalid method type for event watching\"));\n\n                case 9:\n                  if (this.tronWeb.eventServer) {\n                    e.next = 11;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"No event server configured\"));\n\n                case 11:\n                  return r = !1, i = !1, s = Date.now() - 1e3, o = function () {\n                    var e = h()(d.a.mark(function e() {\n                      var n, r, o, a, c, l;\n                      return d.a.wrap(function (e) {\n                        for (;;) {\n                          switch (e.prev = e.next) {\n                            case 0:\n                              return e.prev = 0, n = {\n                                since: s,\n                                eventName: u.name,\n                                sort: \"block_timestamp\",\n                                blockNumber: \"latest\",\n                                filters: t.filters\n                              }, t.resourceNode && (/full/i.test(t.resourceNode) ? n.onlyUnconfirmed = !0 : n.onlyConfirmed = !0), e.next = 5, u.tronWeb.event.getEventsByContractAddress(u.contract.address, n);\n\n                            case 5:\n                              return r = e.sent, o = r.sort(function (e, t) {\n                                return t.block - e.block;\n                              }), a = Xe()(o, 1), c = a[0], l = r.filter(function (e, n) {\n                                return (!t.resourceNode || !e.resourceNode || t.resourceNode.toLowerCase() === e.resourceNode.toLowerCase()) && !r.slice(0, n).some(function (t) {\n                                  return JSON.stringify(t) == JSON.stringify(e);\n                                }) && (!i || e.block > i);\n                              }), c && (i = c.block), e.abrupt(\"return\", l);\n\n                            case 12:\n                              return e.prev = 12, e.t0 = e.catch(0), e.abrupt(\"return\", Promise.reject(e.t0));\n\n                            case 15:\n                            case \"end\":\n                              return e.stop();\n                          }\n                        }\n                      }, e, null, [[0, 12]]);\n                    }));\n                    return function () {\n                      return e.apply(this, arguments);\n                    };\n                  }(), a = function a() {\n                    r && clearInterval(r), r = setInterval(function () {\n                      o().then(function (e) {\n                        return e.forEach(function (e) {\n                          n(null, Ve.parseEvent(e, u.abi));\n                        });\n                      }).catch(function (e) {\n                        return n(e);\n                      });\n                    }, 3e3);\n                  }, e.next = 18, o();\n\n                case 18:\n                  return a(), e.abrupt(\"return\", {\n                    start: a(),\n                    stop: function stop() {\n                      r && (clearInterval(r), r = !1);\n                    }\n                  });\n\n                case 20:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }]), e;\n  }(),\n      at = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n          n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],\n          r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n      if (g()(this, e), !t || !t instanceof vt) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = Ve.promiseInjector(this), this.address = r, this.abi = n, this.eventListener = !1, this.bytecode = !1, this.deployed = !1, this.lastBlock = !1, this.methods = {}, this.methodInstances = {}, this.props = [], this.tronWeb.isAddress(r) ? this.deployed = !0 : this.address = !1, this.loadAbi(n);\n    }\n\n    return y()(e, [{\n      key: \"_getEvents\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r,\n              i,\n              s,\n              o,\n              a = this,\n              u = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  return t = u.length > 0 && void 0 !== u[0] ? u[0] : {}, e.next = 3, this.tronWeb.event.getEventsByContractAddress(this.address, t);\n\n                case 3:\n                  return n = e.sent, r = n.sort(function (e, t) {\n                    return t.block - e.block;\n                  }), i = Xe()(r, 1), s = i[0], o = n.filter(function (e, r) {\n                    return (!t.resourceNode || !e.resourceNode || t.resourceNode.toLowerCase() === e.resourceNode.toLowerCase()) && !n.slice(0, r).some(function (t) {\n                      return JSON.stringify(t) == JSON.stringify(e);\n                    }) && (!a.lastBlock || e.block > a.lastBlock);\n                  }), s && (this.lastBlock = s.block), e.abrupt(\"return\", o);\n\n                case 8:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"_startEventListener\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n,\n              r = this,\n              i = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = i.length > 0 && void 0 !== i[0] ? i[0] : {}, n = i.length > 1 ? i[1] : void 0, Ve.isFunction(t) && (n = t, t = {}), this.eventListener && clearInterval(this.eventListener), this.tronWeb.eventServer) {\n                    e.next = 6;\n                    break;\n                  }\n\n                  throw new Error(\"Event server is not configured\");\n\n                case 6:\n                  if (this.address) {\n                    e.next = 8;\n                    break;\n                  }\n\n                  throw new Error(\"Contract is not configured with an address\");\n\n                case 8:\n                  return this.eventCallback = n, e.next = 11, this._getEvents(t);\n\n                case 11:\n                  this.eventListener = setInterval(function () {\n                    r._getEvents(t).then(function (e) {\n                      return e.forEach(function (e) {\n                        r.eventCallback && r.eventCallback(e);\n                      });\n                    }).catch(function (e) {\n                      console.error(\"Failed to get event list\", e);\n                    });\n                  }, 3e3);\n\n                case 12:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"_stopEventListener\",\n      value: function value() {\n        this.eventListener && (clearInterval(this.eventListener), this.eventListener = !1, this.eventCallback = !1);\n      }\n    }, {\n      key: \"hasProperty\",\n      value: function value(e) {\n        return this.hasOwnProperty(e) || this.__proto__.hasOwnProperty(e);\n      }\n    }, {\n      key: \"loadAbi\",\n      value: function value(e) {\n        var t = this;\n        this.abi = e, this.methods = {}, this.props.forEach(function (e) {\n          return delete t[e];\n        }), e.forEach(function (e) {\n          if (e.type && !/constructor/i.test(e.type)) {\n            var n = new ot(t, e),\n                r = n.onMethod.bind(n),\n                i = n.name,\n                s = n.functionSelector,\n                o = n.signature;\n            t.methods[i] = r, t.methods[s] = r, t.methods[o] = r, t.methodInstances[i] = n, t.methodInstances[s] = n, t.methodInstances[o] = n, t.hasProperty(i) || (t[i] = r, t.props.push(i)), t.hasProperty(s) || (t[s] = r, t.props.push(s)), t.hasProperty(o) || (t[o] = r, t.props.push(o));\n          }\n        });\n      }\n    }, {\n      key: \"decodeInput\",\n      value: function value(e) {\n        var t = e.substring(0, 8),\n            n = e.substring(8);\n        if (!this.methodInstances[t]) throw new Error(\"Contract method \" + t + \" not found\");\n        return {\n          name: this.methodInstances[t].name,\n          params: this.methodInstances[t].decodeInput(n)\n        };\n      }\n    }, {\n      key: \"new\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t) {\n          var n,\n              r,\n              i,\n              s,\n              o,\n              a,\n              u = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (n = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, r = u.length > 2 && void 0 !== u[2] && u[2], Ve.isFunction(n) && (r = n, n = this.tronWeb.defaultPrivateKey), r) {\n                    e.next = 5;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.new, t, n));\n\n                case 5:\n                  return e.prev = 5, i = this.tronWeb.address.fromPrivateKey(n), e.next = 9, this.tronWeb.transactionBuilder.createSmartContract(t, i);\n\n                case 9:\n                  return s = e.sent, e.next = 12, this.tronWeb.trx.sign(s, n);\n\n                case 12:\n                  return o = e.sent, e.next = 15, this.tronWeb.trx.sendRawTransaction(o);\n\n                case 15:\n                  if (!(a = e.sent).code) {\n                    e.next = 18;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", r({\n                    error: a.code,\n                    message: this.tronWeb.toUtf8(a.message)\n                  }));\n\n                case 18:\n                  return e.abrupt(\"return\", this.at(o.contract_address, r));\n\n                case 21:\n                  return e.prev = 21, e.t0 = e.catch(5), e.abrupt(\"return\", r(e.t0));\n\n                case 24:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[5, 21]]);\n        }));\n        return function (t) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"at\",\n      value: function () {\n        var e = h()(d.a.mark(function e(t) {\n          var n,\n              r,\n              i = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (n = i.length > 1 && void 0 !== i[1] && i[1]) {\n                    e.next = 3;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.at, t));\n\n                case 3:\n                  return e.prev = 3, e.next = 6, this.tronWeb.trx.getContract(t);\n\n                case 6:\n                  if ((r = e.sent).contract_address) {\n                    e.next = 9;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"Unknown error: \" + JSON.stringify(r, null, 2)));\n\n                case 9:\n                  return this.address = r.contract_address, this.bytecode = r.bytecode, this.deployed = !0, this.loadAbi(r.abi.entrys), e.abrupt(\"return\", n(null, this));\n\n                case 16:\n                  if (e.prev = 16, e.t0 = e.catch(3), !e.t0.toString().includes(\"does not exist\")) {\n                    e.next = 20;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", n(\"Contract has not been deployed on the network\"));\n\n                case 20:\n                  return e.abrupt(\"return\", n(e.t0));\n\n                case 21:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this, [[3, 16]]);\n        }));\n        return function (t) {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"events\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Ve.isFunction(e) && (t = e, e = {}), !Ve.isFunction(t)) throw new Error(\"Callback function expected\");\n        var n = this;\n        return {\n          start: function start() {\n            var r = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n            return r ? (n._startEventListener(e, t).then(function () {\n              r();\n            }).catch(function (e) {\n              r(e);\n            }), this) : (n._startEventListener(e, t), this);\n          },\n          stop: function stop() {\n            n._stopEventListener();\n          }\n        };\n      }\n    }]), e;\n  }(),\n      ut = n(20),\n      ct = n.n(ut),\n      dt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (g()(this, e), !t || !t instanceof vt) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.pluginNoOverride = [\"register\"];\n    }\n\n    return y()(e, [{\n      key: \"register\",\n      value: function value(e, t) {\n        var n = {\n          requires: \"0.0.0\",\n          components: {}\n        },\n            r = {\n          plugged: [],\n          skipped: []\n        },\n            i = new e(this.tronWeb);\n        if (Ve.isFunction(i.pluginInterface) && (n = i.pluginInterface(t)), !ct.a.satisfies(vt.version, n.requires)) throw new Error(\"The plugin is not compatible with this version of TronWeb\");\n\n        for (var s in n.components) {\n          if (this.tronWeb.hasOwnProperty(s)) {\n            var o = n.components[s],\n                a = this.tronWeb[s].pluginNoOverride || [];\n\n            for (var u in o) {\n              \"constructor\" === u || this.tronWeb[s][u] && (a.includes(u) || /^_/.test(u)) ? r.skipped.push(u) : (this.tronWeb[s][u] = o[u].bind(this.tronWeb[s]), r.plugged.push(u));\n            }\n          }\n        }\n\n        return r;\n      }\n    }]), e;\n  }(),\n      lt = n(21),\n      ht = n.n(lt),\n      ft = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (g()(this, e), !(t && t instanceof vt)) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = Ve.promiseInjector(this);\n    }\n\n    return y()(e, [{\n      key: \"setServer\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"healthcheck\";\n        if (!t) return this.tronWeb.eventServer = !1;\n        if (Ve.isString(t) && (t = new ze.HttpProvider(t)), !this.tronWeb.isValidProvider(t)) throw new Error(\"Invalid event server provided\");\n        this.tronWeb.eventServer = t, this.tronWeb.eventServer.isConnected = function () {\n          return e.tronWeb.eventServer.request(n).then(function () {\n            return !0;\n          }).catch(function () {\n            return !1;\n          });\n        };\n      }\n    }, {\n      key: \"getEventsByContractAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = Object.assign({\n          sinceTimestamp: 0,\n          eventName: !1,\n          blockNumber: !1,\n          size: 20,\n          page: 1\n        }, t),\n            i = r.sinceTimestamp,\n            s = r.since,\n            o = r.fromTimestamp,\n            a = r.eventName,\n            u = r.blockNumber,\n            c = r.size,\n            d = r.page,\n            l = r.onlyConfirmed,\n            h = r.onlyUnconfirmed,\n            f = r.previousLastEventFingerprint,\n            p = r.previousFingerprint,\n            g = r.fingerprint,\n            b = r.rawResponse,\n            y = r.sort,\n            m = r.filters;\n        if (!n) return this.injectPromise(this.getEventsByContractAddress, e, t);\n        if (o = o || i || s, !this.tronWeb.eventServer) return n(\"No event server configured\");\n        var k = [];\n        if (!this.tronWeb.isAddress(e)) return n(\"Invalid contract address provided\");\n        if (a && !e) return n(\"Usage of event name filtering requires a contract address\");\n        if (void 0 !== o && !Ve.isInteger(o)) return n(\"Invalid fromTimestamp provided\");\n        if (!Ve.isInteger(c)) return n(\"Invalid size provided\");\n        if (c > 200 && (console.warn(\"Defaulting to maximum accepted size: 200\"), c = 200), !Ve.isInteger(d)) return n(\"Invalid page provided\");\n        if (u && !a) return n(\"Usage of block number filtering requires an event name\");\n        e && k.push(this.tronWeb.address.fromHex(e)), a && k.push(a), u && k.push(u);\n        var x = {\n          size: c,\n          page: d\n        };\n        return \"object\" === v()(m) && Object.keys(m).length > 0 && (x.filters = JSON.stringify(m)), o && (x.fromTimestamp = x.since = o), l && (x.onlyConfirmed = l), h && !l && (x.onlyUnconfirmed = h), y && (x.sort = y), (g = g || p || f) && (x.fingerprint = g), this.tronWeb.eventServer.request(\"event/contract/\".concat(k.join(\"/\"), \"?\").concat(ht.a.stringify(x))).then(function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          return e ? Ve.isArray(e) ? n(null, !0 === b ? e : e.map(function (e) {\n            return Ve.mapEvent(e);\n          })) : n(e) : n(\"Unknown error occurred\");\n        }).catch(function (e) {\n          return n(e.response && e.response.data || e);\n        });\n      }\n    }, {\n      key: \"getEventsByTransactionID\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Ve.isFunction(t) && (n = t, t = {}), n ? this.tronWeb.eventServer ? this.tronWeb.eventServer.request(\"event/transaction/\".concat(e)).then(function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          return e ? Ve.isArray(e) ? n(null, !0 === t.rawResponse ? e : e.map(function (e) {\n            return Ve.mapEvent(e);\n          })) : n(e) : n(\"Unknown error occurred\");\n        }).catch(function (e) {\n          return n(e.response && e.response.data || e);\n        }) : n(\"No event server configured\") : this.injectPromise(this.getEventsByTransactionID, e, t);\n      }\n    }]), e;\n  }();\n\n  n.d(t, \"default\", function () {\n    return vt;\n  });\n\n  var vt = function (e) {\n    function t() {\n      var e,\n          n,\n          r = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n          s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n          o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n      return g()(this, t), e = k()(this, w()(t).call(this)), \"object\" === v()(r) && (r.fullNode || r.fullHost) ? (n = r.fullNode || r.fullHost, i = r.solidityNode || r.fullHost, s = r.eventServer || r.fullHost, o = r.privateKey) : n = r, Ve.isString(n) && (n = new ze.HttpProvider(n)), Ve.isString(i) && (i = new ze.HttpProvider(i)), Ve.isString(s) && (s = new ze.HttpProvider(s)), e.event = new ft(A()(e)), e.transactionBuilder = new tt(A()(e)), e.trx = new nt(A()(e)), e.plugin = new dt(A()(e)), e.utils = Ve, e.setFullNode(n), e.setSolidityNode(i), e.setEventServer(s), e.providers = ze, e.BigNumber = Le.a, e.defaultBlock = !1, e.defaultPrivateKey = !1, e.defaultAddress = {\n        hex: !1,\n        base58: !1\n      }, [\"sha3\", \"toHex\", \"toUtf8\", \"fromUtf8\", \"toAscii\", \"fromAscii\", \"toDecimal\", \"fromDecimal\", \"toSun\", \"fromSun\", \"toBigNumber\", \"isAddress\", \"createAccount\", \"address\", \"version\"].forEach(function (n) {\n        e[n] = t[n];\n      }), o && e.setPrivateKey(o), e.injectPromise = Ve.promiseInjector(A()(e)), e;\n    }\n\n    return N()(t, e), y()(t, [{\n      key: \"setDefaultBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if ([!1, \"latest\", \"earliest\", 0].includes(e)) return this.defaultBlock = e;\n        if (!Ve.isInteger(e) || !e) throw new Error(\"Invalid block ID provided\");\n        this.defaultBlock = Math.abs(e);\n      }\n    }, {\n      key: \"setPrivateKey\",\n      value: function value(e) {\n        try {\n          this.setAddress(this.address.fromPrivateKey(e));\n        } catch (e) {\n          throw new Error(\"Invalid private key provided\");\n        }\n\n        this.defaultPrivateKey = e, this.emit(\"privateKeyChanged\", e);\n      }\n    }, {\n      key: \"setAddress\",\n      value: function value(e) {\n        if (!this.isAddress(e)) throw new Error(\"Invalid address provided\");\n        var t = this.address.toHex(e),\n            n = this.address.fromHex(e);\n        this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== n && (this.defaultPrivateKey = !1), this.defaultAddress = {\n          hex: t,\n          base58: n\n        }, this.emit(\"addressChanged\", {\n          hex: t,\n          base58: n\n        });\n      }\n    }, {\n      key: \"isValidProvider\",\n      value: function value(e) {\n        return Object.values(ze).some(function (t) {\n          return e instanceof t;\n        });\n      }\n    }, {\n      key: \"setFullNode\",\n      value: function value(e) {\n        if (Ve.isString(e) && (e = new ze.HttpProvider(e)), !this.isValidProvider(e)) throw new Error(\"Invalid full node provided\");\n        this.fullNode = e, this.fullNode.setStatusPage(\"wallet/getnowblock\");\n      }\n    }, {\n      key: \"setSolidityNode\",\n      value: function value(e) {\n        if (Ve.isString(e) && (e = new ze.HttpProvider(e)), !this.isValidProvider(e)) throw new Error(\"Invalid solidity node provided\");\n        this.solidityNode = e, this.solidityNode.setStatusPage(\"walletsolidity/getnowblock\");\n      }\n    }, {\n      key: \"setEventServer\",\n      value: function value() {\n        var e;\n        (e = this.event).setServer.apply(e, arguments);\n      }\n    }, {\n      key: \"currentProviders\",\n      value: function value() {\n        return {\n          fullNode: this.fullNode,\n          solidityNode: this.solidityNode,\n          eventServer: this.eventServer\n        };\n      }\n    }, {\n      key: \"currentProvider\",\n      value: function value() {\n        return this.currentProviders();\n      }\n    }, {\n      key: \"getEventResult\",\n      value: function value() {\n        for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++) {\n          n[r] = arguments[r];\n        }\n\n        return \"object\" !== v()(n[1]) && (n[1] = {\n          sinceTimestamp: n[1] || 0,\n          eventName: n[2] || !1,\n          blockNumber: n[3] || !1,\n          size: n[4] || 20,\n          page: n[5] || 1\n        }, n.splice(2, 4), Ve.isFunction(n[2]) || (Ve.isFunction(n[1].page) ? (n[2] = n[1].page, n[1].page = 1) : Ve.isFunction(n[1].size) && (n[2] = n[1].size, n[1].size = 20, n[1].page = 1))), (e = this.event).getEventsByContractAddress.apply(e, n);\n      }\n    }, {\n      key: \"getEventByTransactionID\",\n      value: function value() {\n        var e;\n        return (e = this.event).getEventsByTransactionID.apply(e, arguments);\n      }\n    }, {\n      key: \"contract\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return new at(this, e, t);\n      }\n    }, {\n      key: \"isConnected\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t,\n              n = arguments;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  if (t = n.length > 0 && void 0 !== n[0] && n[0]) {\n                    e.next = 3;\n                    break;\n                  }\n\n                  return e.abrupt(\"return\", this.injectPromise(this.isConnected));\n\n                case 3:\n                  return e.t0 = t, e.next = 6, this.fullNode.isConnected();\n\n                case 6:\n                  return e.t1 = e.sent, e.next = 9, this.solidityNode.isConnected();\n\n                case 9:\n                  if (e.t2 = e.sent, e.t3 = this.eventServer, !e.t3) {\n                    e.next = 15;\n                    break;\n                  }\n\n                  return e.next = 14, this.eventServer.isConnected();\n\n                case 14:\n                  e.t3 = e.sent;\n\n                case 15:\n                  return e.t4 = e.t3, e.t5 = {\n                    fullNode: e.t1,\n                    solidityNode: e.t2,\n                    eventServer: e.t4\n                  }, e.abrupt(\"return\", (0, e.t0)(null, e.t5));\n\n                case 18:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }], [{\n      key: \"sha3\",\n      value: function value(e) {\n        return (!(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1] ? \"0x\" : \"\") + ce(Buffer.from(e, \"utf-8\")).toString().substring(2);\n      }\n    }, {\n      key: \"toHex\",\n      value: function value(e) {\n        if (Ve.isBoolean(e)) return t.fromDecimal(+e);\n        if (Ve.isBigNumber(e)) return t.fromDecimal(e);\n        if (\"object\" === v()(e)) return t.fromUtf8(JSON.stringify(e));\n\n        if (Ve.isString(e)) {\n          if (/^(-|)0x/.test(e)) return e;\n          if (!isFinite(e)) return t.fromUtf8(e);\n        }\n\n        var n = t.fromDecimal(e);\n        if (\"0xNaN\" === n) throw new Error(\"The passed value is not convertible to a hex string\");\n        return n;\n      }\n    }, {\n      key: \"toUtf8\",\n      value: function value(e) {\n        if (Ve.isHex(e)) return e = e.replace(/^0x/, \"\"), Buffer.from(e, \"hex\").toString(\"utf8\");\n        throw new Error(\"The passed value is not a valid hex string\");\n      }\n    }, {\n      key: \"fromUtf8\",\n      value: function value(e) {\n        if (!Ve.isString(e)) throw new Error(\"The passed value is not a valid utf-8 string\");\n        return \"0x\" + Buffer.from(e, \"utf8\").toString(\"hex\");\n      }\n    }, {\n      key: \"toAscii\",\n      value: function value(e) {\n        if (Ve.isHex(e)) {\n          var t = \"\",\n              n = 0,\n              r = e.length;\n\n          for (\"0x\" === e.substring(0, 2) && (n = 2); n < r; n += 2) {\n            var i = parseInt(e.substr(n, 2), 16);\n            t += String.fromCharCode(i);\n          }\n\n          return t;\n        }\n\n        throw new Error(\"The passed value is not a valid hex string\");\n      }\n    }, {\n      key: \"fromAscii\",\n      value: function value(e, t) {\n        if (!Ve.isString(e)) throw new Error(\"The passed value is not a valid utf-8 string\");\n        return \"0x\" + Buffer.from(e, \"ascii\").toString(\"hex\").padEnd(t, \"0\");\n      }\n    }, {\n      key: \"toDecimal\",\n      value: function value(e) {\n        return t.toBigNumber(e).toNumber();\n      }\n    }, {\n      key: \"fromDecimal\",\n      value: function value(e) {\n        var n = t.toBigNumber(e),\n            r = n.toString(16);\n        return n.isLessThan(0) ? \"-0x\" + r.substr(1) : \"0x\" + r;\n      }\n    }, {\n      key: \"fromSun\",\n      value: function value(e) {\n        var n = t.toBigNumber(e).div(1e6);\n        return Ve.isBigNumber(e) ? n : n.toString(10);\n      }\n    }, {\n      key: \"toSun\",\n      value: function value(e) {\n        var n = t.toBigNumber(e).times(1e6);\n        return Ve.isBigNumber(e) ? n : n.toString(10);\n      }\n    }, {\n      key: \"toBigNumber\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n        return Ve.isBigNumber(e) ? e : Ve.isString(e) && /^(-|)0x/.test(e) ? new Le.a(e.replace(\"0x\", \"\"), 16) : new Le.a(e.toString(10), 10);\n      }\n    }, {\n      key: \"isAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!Ve.isString(e)) return !1;\n        if (42 === e.length) try {\n          return t.isAddress(Ve.crypto.getBase58CheckAddress(Ve.code.hexStr2byteArray(e)));\n        } catch (e) {\n          return !1;\n        }\n\n        try {\n          return Ve.crypto.isAddressValid(e);\n        } catch (e) {\n          return !1;\n        }\n      }\n    }, {\n      key: \"createAccount\",\n      value: function () {\n        var e = h()(d.a.mark(function e() {\n          var t;\n          return d.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  return t = Ve.accounts.generateAccount(), e.abrupt(\"return\", t);\n\n                case 2:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e);\n        }));\n        return function () {\n          return e.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"address\",\n      get: function get() {\n        return {\n          fromHex: function fromHex(e) {\n            return Ve.isHex(e) ? Ve.crypto.getBase58CheckAddress(Ve.code.hexStr2byteArray(e.replace(/^0x/, U))) : e;\n          },\n          toHex: function toHex(e) {\n            return Ve.isHex(e) ? e.toLowerCase().replace(/^0x/, U) : Ve.code.byteArray2hexStr(Ve.crypto.decodeBase58Address(e)).toLowerCase();\n          },\n          fromPrivateKey: function fromPrivateKey(e) {\n            try {\n              return Ve.crypto.pkToAddress(e);\n            } catch (e) {\n              return !1;\n            }\n          }\n        };\n      }\n    }]), t;\n  }(Je.a);\n\n  S()(vt, \"providers\", ze), S()(vt, \"BigNumber\", Le.a), S()(vt, \"TransactionBuilder\", tt), S()(vt, \"Trx\", nt), S()(vt, \"Contract\", at), S()(vt, \"Plugin\", dt), S()(vt, \"Event\", ft), S()(vt, \"version\", Ge.a), S()(vt, \"utils\", Ve);\n}]).default;","map":null,"metadata":{},"sourceType":"script"}