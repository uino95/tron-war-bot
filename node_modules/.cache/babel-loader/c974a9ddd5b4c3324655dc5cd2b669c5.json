{"ast":null,"code":"import _regeneratorRuntime from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/spranga/Dev/tron-war-bot/src/components/TronLinkInfo/index.js\";\nimport React, { Component } from \"react\"; //import \"./TronLinkInfo.scss\";\n\nvar TronLinkInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TronLinkInfo, _Component);\n\n  function TronLinkInfo(props) {\n    var _this;\n\n    _classCallCheck(this, TronLinkInfo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TronLinkInfo).call(this, props));\n    _this.state = {\n      accountAddress: \"account address will show up here\",\n      accountBalance: \"account balance will show up here\",\n      accountBandwidth: \"account bandwidth will show up here\"\n    };\n    return _this;\n  } // Uncomment each call one at a time to see your account information filled out\n\n\n  _createClass(TronLinkInfo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAccountAddress();\n      this.fetchAccountBalance(); //    this.fetchAccountBandwidth();\n    } // // The function below will return an object with address, balance, create_time,\n    // // account_resource;\n\n  }, {\n    key: \"fetchAccountAddress\",\n    value: function () {\n      var _fetchAccountAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var account, accountAddress;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return window.tronWeb.trx.getAccount();\n\n              case 2:\n                account = _context.sent;\n                accountAddress = account.address; // HexString(Ascii)\n                // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n                //   accountAddress\n                // ); // Base58\n\n                this.setState({\n                  accountAddress: accountAddress\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchAccountAddress() {\n        return _fetchAccountAddress.apply(this, arguments);\n      }\n\n      return fetchAccountAddress;\n    }() //\n    // // The function below will return the account balance in SUN as a number\n\n  }, {\n    key: \"fetchAccountBalance\",\n    value: function () {\n      var _fetchAccountBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var balanceInSun;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.tronWeb.trx.getBalance();\n\n              case 2:\n                balanceInSun = _context2.sent;\n                //number\n                // const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n                // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n                this.setState({\n                  accountBalance: balanceInSun\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchAccountBalance() {\n        return _fetchAccountBalance.apply(this, arguments);\n      }\n\n      return fetchAccountBalance;\n    }() //\n    // // The function below will return the account bandwidth as a number\n\n  }, {\n    key: \"fetchAccountBandwidth\",\n    value: function () {\n      var _fetchAccountBandwidth = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var accountBandwidth;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.tronWeb.trx.getBandwidth();\n\n              case 2:\n                accountBandwidth = _context3.sent;\n                // number\n                this.setState({\n                  accountBandwidth: accountBandwidth\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchAccountBandwidth() {\n        return _fetchAccountBandwidth.apply(this, arguments);\n      }\n\n      return fetchAccountBandwidth;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          accountAddress = _this$state.accountAddress,\n          accountBalance = _this$state.accountBalance,\n          accountBandwidth = _this$state.accountBandwidth;\n      return React.createElement(\"div\", {\n        className: \"tronLinkInfo-component-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"account-info-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" Account Information \"), React.createElement(\"div\", {\n        className: \"account-info-address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Address: \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, accountAddress)), React.createElement(\"div\", {\n        className: \"account-info-balance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Balance: \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, accountBalance)), React.createElement(\"div\", {\n        className: \"account-info-bandwidth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Bandwidth: \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, accountBandwidth)));\n    }\n  }]);\n\n  return TronLinkInfo;\n}(Component);\n\nexport { TronLinkInfo as default };","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/components/TronLinkInfo/index.js"],"names":["React","Component","TronLinkInfo","props","state","accountAddress","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","window","tronWeb","trx","getAccount","account","address","setState","getBalance","balanceInSun","getBandwidth"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;IAEqBC,Y;;;;;AACnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,mCADL;AAEXC,MAAAA,cAAc,EAAE,mCAFL;AAGXC,MAAAA,gBAAgB,EAAE;AAHP,KAAb;AAHiB;AAQlB,G,CAED;;;;;wCACoB;AAClB,WAAKC,mBAAL;AACA,WAAKC,mBAAL,GAFkB,CAGtB;AACG,K,CAED;AACA;;;;;;;;;;;;;;uBAEwBC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBC,UAAnB,E;;;AAAhBC,gBAAAA,O;AACAT,gBAAAA,c,GAAiBS,OAAO,CAACC,O,EAAS;AACxC;AACA;AACA;;AAEA,qBAAKC,QAAL,CAAc;AACZX,kBAAAA,cAAc,EAAEA;AADJ,iBAAd;;;;;;;;;;;;;;;QAIF;AACA;;;;;;;;;;;;;;uBAE6BK,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBK,UAAnB,E;;;AAArBC,gBAAAA,Y;AAAsD;AAC5D;AACA;AAEA,qBAAKF,QAAL,CAAc;AACZV,kBAAAA,cAAc,EAAEY;AADJ,iBAAd;;;;;;;;;;;;;;;QAIF;AACA;;;;;;;;;;;;;;uBAEiCR,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBO,YAAnB,E;;;AAAzBZ,gBAAAA,gB;AAA4D;AAElE,qBAAKS,QAAL,CAAc;AACZT,kBAAAA,gBAAgB,EAAEA;AADN,iBAAd;;;;;;;;;;;;;;;;;;6BAKO;AAAA,wBACsD,KAAKH,KAD3D;AAAA,UACCC,cADD,eACCA,cADD;AAAA,UACiBC,cADjB,eACiBA,cADjB;AAAA,UACiCC,gBADjC,eACiCA,gBADjC;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,cAAP,CADX,CAFF,EAKE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,cAAP,CADX,CALF,EAQE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,gBAAP,CADb,CARF,CADF;AAcD;;;;EApEuCN,S;;SAArBC,Y","sourcesContent":["import React, { Component } from \"react\";\n\n//import \"./TronLinkInfo.scss\";\n\nexport default class TronLinkInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      accountAddress: \"account address will show up here\",\n      accountBalance: \"account balance will show up here\",\n      accountBandwidth: \"account bandwidth will show up here\"\n    };\n  }\n\n  // Uncomment each call one at a time to see your account information filled out\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n//    this.fetchAccountBandwidth();\n  }\n\n  // // The function below will return an object with address, balance, create_time,\n  // // account_resource;\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n    // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n    //   accountAddress\n    // ); // Base58\n\n    this.setState({\n      accountAddress: accountAddress\n    });\n  }\n  //\n  // // The function below will return the account balance in SUN as a number\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    // const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      accountBalance: balanceInSun\n    });\n  }\n  //\n  // // The function below will return the account bandwidth as a number\n  async fetchAccountBandwidth() {\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\n\n    this.setState({\n      accountBandwidth: accountBandwidth\n    });\n  }\n\n  render() {\n    const { accountAddress, accountBalance, accountBandwidth } = this.state;\n    return (\n      <div className=\"tronLinkInfo-component-container\">\n        <div className=\"account-info-header\"> Account Information </div>\n        <div className=\"account-info-address\">\n          Address: <span>{accountAddress}</span>\n        </div>\n        <div className=\"account-info-balance\">\n          Balance: <span>{accountBalance}</span>\n        </div>\n        <div className=\"account-info-bandwidth\">\n          Bandwidth: <span>{accountBandwidth}</span>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}