{"ast":null,"code":"import _classCallCheck from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/spranga/Dev/tron-war-bot/src/components/Map.js\";\nimport React from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport geoData from \"./world-50m.json\";\nimport { connect } from \"react-redux\";\nimport { selectedNations, nations } from '../redux/selector';\nimport { selectNation as _selectNation, updateMap as _updateMap } from '../redux/actions';\nvar wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\n\nvar BasicMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BasicMap, _React$Component);\n\n  function BasicMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BasicMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BasicMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function (event) {\n      var currentNation = event.properties.name;\n      console.log(\"clicked on \", currentNation);\n\n      _this.props.selectNation(currentNation);\n\n      console.log(\"nations: \", _this.props.nations);\n    };\n\n    return _this;\n  }\n\n  _createClass(BasicMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isSelected;\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        disablePanning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: geoData,\n        disableOptimization: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, function (geographies, projection) {\n        if (geographies.length !== _this2.props.nations.length) _this2.props.updateMap(geographies);\n        return geographies.map(function (geography, i) {\n          isSelected = _this2.props.selectedNations.includes(geography.properties.name);\n          return geography.id !== \"ATA\" && React.createElement(Geography, {\n            key: i,\n            geography: geography,\n            projection: projection,\n            onClick: function onClick(event) {\n              return _this2.handleClick(event);\n            },\n            style: {\n              default: {\n                fill: isSelected ? \"#FF5722\" : \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: isSelected ? \"#FF5722\" : \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#FF5722\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          });\n        });\n      }))));\n    }\n  }]);\n\n  return BasicMap;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectedNations: selectedNations(state),\n    nations: nations(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    selectNation: function selectNation(nation) {\n      return dispatch(_selectNation(nation));\n    },\n    updateMap: function updateMap(nations) {\n      return dispatch(_updateMap(nations));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicMap);","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/components/Map.js"],"names":["React","ComposableMap","ZoomableGroup","Geographies","Geography","geoData","connect","selectedNations","nations","selectNation","updateMap","wrapperStyles","width","maxWidth","margin","BasicMap","handleClick","event","currentNation","properties","name","console","log","props","isSelected","scale","rotation","height","geographies","projection","length","map","geography","i","includes","id","default","fill","stroke","strokeWidth","outline","hover","pressed","Component","mapStateToProps","state","mapDispatchToProps","dispatch","nation"],"mappings":"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","sourcesContent":["\nimport React from \"react\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\n\nimport geoData from \"./world-50m.json\"\nimport { connect } from \"react-redux\";\n\nimport {selectedNations, nations} from '../redux/selector'\nimport {selectNation, updateMap} from '../redux/actions'\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n}\n\nclass BasicMap extends React.Component{ \n  \n  handleClick = (event) => {\n    const currentNation = event.properties.name\n    console.log(\"clicked on \", currentNation)\n    this.props.selectNation(currentNation)\n    console.log(\"nations: \", this.props.nations)\n  }\n\n  render(){\n    let isSelected\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projectionConfig={{\n            scale: 205,\n            rotation: [-11,0,0],\n          }}\n          width={980}\n          height={551}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          >\n          <ZoomableGroup center={[0,20]} disablePanning>\n            <Geographies geography={geoData} disableOptimization>\n              {(geographies, projection) => {\n                if(geographies.length !== this.props.nations.length) this.props.updateMap(geographies) \n                return (\n                  geographies.map((geography, i) => \n                  {\n                    isSelected = this.props.selectedNations.includes(geography.properties.name) \n                    return geography.id !== \"ATA\" && \n                    (\n                      <Geography\n                        key={i}\n                        geography={geography}\n                        projection={projection}\n                        onClick={(event) => this.handleClick(event)}\n                        style={{\n                          default: {\n                            fill: isSelected ? \"#FF5722\" : \"#ECEFF1\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                          hover: {\n                            fill: isSelected ? \"#FF5722\" : \"#ECEFF1\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                          pressed: {\n                            fill: \"#FF5722\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                        }}\n                      />\n                    )\n                  })\n                )\n              }\n            }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedNations: selectedNations(state),\n  nations: nations(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  selectNation: (nation) => dispatch(selectNation(nation)),\n  updateMap: (nations) => dispatch(updateMap(nations))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicMap);\n"]},"metadata":{},"sourceType":"module"}