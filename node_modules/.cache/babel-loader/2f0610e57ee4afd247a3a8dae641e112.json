{"ast":null,"code":"import _regeneratorRuntime from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/spranga/Dev/tron-war-bot/src/App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport withTracker from \"./withTracker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./shards-dashboard/styles/shards-dashboards.1.1.0.min.css\";\nimport Utils from './utils/tronUtils';\nimport TronWeb from \"tronweb\";\nimport TronLinkInfo from \"./components/TronLinkInfo\";\nimport TronLinkGuide from \"./components/TronLinkGuide\";\nimport { Provider } from 'react-redux';\nimport MainPage from \"./views/MainPage\";\nvar FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new Promise(function (resolve) {\n                  var tronWebState = {\n                    installed: !!window.tronWeb,\n                    loggedIn: window.tronWeb && window.tronWeb.ready\n                  };\n\n                  if (tronWebState.installed) {\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    return resolve();\n                  }\n\n                  var tries = 0;\n                  var timer = setInterval(function () {\n                    if (tries >= 10) {\n                      var TRONGRID_API = \"https://api.trongrid.io\";\n                      window.tronWeb = new TronWeb(TRONGRID_API, TRONGRID_API, TRONGRID_API);\n\n                      _this2.setState({\n                        tronWeb: {\n                          installed: false,\n                          loggedIn: false\n                        }\n                      });\n\n                      clearInterval(timer);\n                      return resolve();\n                    }\n\n                    tronWebState.installed = !!window.tronWeb;\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                    if (!tronWebState.installed) {\n                      return tries++;\n                    }\n\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    resolve();\n                  }, 100);\n                });\n\n              case 2:\n                if (!this.state.tronWeb.loggedIn) {\n                  // Set default address (foundation address) used for contract calls\n                  // Directly overwrites the address object if TronLink disabled the\n                  // function call\n                  window.tronWeb.defaultAddress = {\n                    hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                    base58: FOUNDATION_ADDRESS\n                  };\n                  window.tronWeb.on(\"addressChange\", function () {\n                    if (_this2.state.tronWeb.loggedIn) {\n                      return;\n                    }\n\n                    _this2.setState({\n                      tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                      }\n                    });\n                  });\n                }\n\n                Utils.setTronWeb(window.tronWeb);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.tronWeb.installed) return React.createElement(TronLinkGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n      if (!this.state.tronWeb.loggedIn) return React.createElement(TronLinkGuide, {\n        installed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n      return React.createElement(MainPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/App.js"],"names":["React","BrowserRouter","Router","Route","routes","withTracker","Utils","TronWeb","TronLinkInfo","TronLinkGuide","Provider","MainPage","FOUNDATION_ADDRESS","App","props","state","tronWeb","installed","loggedIn","Promise","resolve","tronWebState","window","ready","setState","tries","timer","setInterval","TRONGRID_API","clearInterval","defaultAddress","hex","address","toHex","base58","on","setTronWeb","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport routes from \"./routes\";\nimport withTracker from \"./withTracker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./shards-dashboard/styles/shards-dashboards.1.1.0.min.css\";\n\nimport Utils from './utils/tronUtils'\nimport TronWeb from \"tronweb\";\nimport TronLinkInfo from \"./components/TronLinkInfo\";\nimport TronLinkGuide from \"./components/TronLinkGuide\";\nimport { Provider } from 'react-redux'\n\nimport MainPage from \"./views/MainPage\"\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await new Promise(resolve => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false\n            }\n          });\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) {\n          return tries++;\n        }\n\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object if TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS\n      };\n\n      window.tronWeb.on(\"addressChange\", () => {\n        if (this.state.tronWeb.loggedIn) {\n          return;\n        }\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true\n          }\n        });\n      });\n    }\n\n    Utils.setTronWeb(window.tronWeb);\n  }\n\n  render() {\n    if (!this.state.tronWeb.installed) return <TronLinkGuide />;\n\n    if (!this.state.tronWeb.loggedIn) return <TronLinkGuide installed />;\n\n    return (\n        <MainPage />\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}