{"ast":null,"code":"import _regeneratorRuntime from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/spranga/Dev/tron-war-bot/src/components/BetBox.js\";\nimport React from \"react\";\nimport { ListGroup, ListGroupItem, Row, Col, Form, FormInput, FormGroup, FormCheckbox, FormSelect, Button, InputGroup, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Alert } from \"shards-react\";\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { selectedNations } from '../redux/selector';\nimport { selectNation as _selectNation, newBet as _newBet } from '../redux/actions';\n\nvar BetBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BetBox, _React$Component);\n\n  function BetBox(props) {\n    var _this;\n\n    _classCallCheck(this, BetBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BetBox).call(this, props));\n\n    _this.showAlert = function (result, data) {\n      _this.clearInterval();\n\n      _this.setState({\n        visible: true,\n        countdown: 0,\n        timeUntilDismissed: 5,\n        success: result,\n        alertText: data\n      });\n\n      _this.interval = setInterval(_this.handleTimeChange, 1000);\n    };\n\n    _this.handleTimeChange = function () {\n      if (_this.state.countdown < _this.state.timeUntilDismissed - 1) {\n        _this.setState(_objectSpread({}, _this.state, {\n          countdown: _this.state.countdown + 1\n        }));\n\n        return;\n      }\n\n      _this.setState(_objectSpread({}, _this.state, {\n        visible: false\n      }));\n\n      _this.clearInterval();\n    };\n\n    _this.clearInterval = function () {\n      clearInterval(_this.interval);\n      _this.interval = null;\n    };\n\n    _this.handleClick = function (event) {\n      console.log(event.target.value); //   const currentNation = event.properties.name\n      //   console.log(\"clicked on \", currentNation)\n      //   this.props.selectNation(currentNation)\n      //   console.log(\"nations: \", this.props.nations)\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState({\n        betAmount: event.target.value\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      var bet = {\n        address: _this.state.accountAddress,\n        amount: _this.state.betAmount,\n        state: _this.props.selectedNations\n      };\n\n      if (bet.address !== undefined && bet.amount && bet.state.length > 0) {\n        // actually do the transaction and verify that is ok\n        axios.post('http://localhost:4000/bets/add', bet).then(function (res) {\n          console.log(res.data);\n\n          if (res.status === 200) {\n            _this.showAlert(true, \"transaction executed succesfully\");\n\n            _this.props.newBet(bet);\n          } else {\n            _this.showAlert(false, \"transaction not executed\");\n          }\n        });\n      } else if (bet.address === undefined) {\n        _this.showAlert(false, \"address undefined\");\n      } else if (bet.state.length === 0) {\n        _this.showAlert(false, \"you have to select at list one state\");\n      }\n    };\n\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      accountAddress: undefined,\n      accountBalance: undefined,\n      accountBandwidth: undefined,\n      dropdown: false,\n      betAmount: 10,\n      visible: false,\n      countdown: 0,\n      timeUntilDismissed: 2,\n      success: false,\n      alertText: 'none'\n    };\n    return _this;\n  }\n\n  _createClass(BetBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAccountAddress();\n      this.fetchAccountBalance(); //    this.fetchAccountBandwidth();\n    }\n  }, {\n    key: \"fetchAccountBalance\",\n    value: function () {\n      var _fetchAccountBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var balanceInSun, balanceInTRX;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return window.tronWeb.trx.getBalance();\n\n              case 2:\n                balanceInSun = _context.sent;\n                //number\n                balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n                // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n                this.setState({\n                  accountBalance: balanceInTRX\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchAccountBalance() {\n        return _fetchAccountBalance.apply(this, arguments);\n      }\n\n      return fetchAccountBalance;\n    }()\n  }, {\n    key: \"fetchAccountAddress\",\n    value: function () {\n      var _fetchAccountAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var account, accountAddress;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.tronWeb.trx.getAccount();\n\n              case 2:\n                account = _context2.sent;\n                accountAddress = account.address; // HexString(Ascii)\n                // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n                //   accountAddress\n                // ); // Base58\n\n                console.log(accountAddress);\n                this.setState({\n                  accountAddress: accountAddress\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchAccountAddress() {\n        return _fetchAccountAddress.apply(this, arguments);\n      }\n\n      return fetchAccountAddress;\n    }()\n  }, {\n    key: \"toggle\",\n    value: function toggle(which) {\n      var newState = _objectSpread({}, this.state);\n\n      newState[which] = !this.state[which];\n      this.setState(newState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          accountAddress = _this$state.accountAddress,\n          accountBalance = _this$state.accountBalance,\n          accountBandwidth = _this$state.accountBandwidth;\n      return React.createElement(ListGroup, {\n        flush: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(ListGroupItem, {\n        className: \"p-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \" \", React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \" Bet Amount \"), \" \", React.createElement(FormInput, {\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        },\n        id: \"betAmount\",\n        defaultValue: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), \" \"), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"TRXBalance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \" TRX BAlance \"), \" \", React.createElement(FormInput, {\n        value: accountBalance,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"currentPayBack\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \" Current PayBack \"), \" \", React.createElement(FormInput, {\n        value: 3,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \" Seleceted States \"), \" \", this.props.selectedNations.length > 0 ? React.createElement(ListGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \" \", this.props.selectedNations.map(function (nation, id) {\n        return React.createElement(ListGroupItem, {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, \" \", nation, \" \");\n      }), \" \") : React.createElement(ListGroupItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \" no nation selected \"), React.createElement(Button, {\n        onClick: function onClick(bet) {\n          return _this2.handleSubmit(bet);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \" Bet \"), \" \", React.createElement(Alert, {\n        className: \"mb-3\",\n        open: this.state.visible,\n        theme: this.state.success ? \"success\" : \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \" \", this.state.alertText, \" \"), \" \"), \" \"), \" \"), \" \"), \" \");\n    }\n  }]);\n\n  return BetBox;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectedNations: selectedNations(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    selectNation: function selectNation(nation) {\n      return dispatch(_selectNation(nation));\n    },\n    newBet: function newBet(bet) {\n      return dispatch(_newBet(bet));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BetBox);","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/components/BetBox.js"],"names":["React","ListGroup","ListGroupItem","Row","Col","Form","FormInput","FormGroup","FormCheckbox","FormSelect","Button","InputGroup","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Alert","axios","connect","selectedNations","selectNation","newBet","BetBox","props","showAlert","result","data","clearInterval","setState","visible","countdown","timeUntilDismissed","success","alertText","interval","setInterval","handleTimeChange","state","handleClick","event","console","log","target","value","handleChange","betAmount","handleSubmit","e","bet","address","accountAddress","amount","undefined","length","post","then","res","status","toggle","bind","accountBalance","accountBandwidth","dropdown","fetchAccountAddress","fetchAccountBalance","window","tronWeb","trx","getBalance","balanceInSun","balanceInTRX","fromSun","getAccount","account","which","newState","map","nation","id","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ListGroup,\n  ListGroupItem,\n  Row,\n  Col,\n  Form,\n  FormInput,\n  FormGroup,\n  FormCheckbox,\n  FormSelect,\n  Button,\n  InputGroup,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Alert\n} from \"shards-react\";\n\nimport axios from 'axios'\n\nimport {\n  connect\n} from 'react-redux'\nimport {\n  selectedNations\n} from '../redux/selector'\nimport {\n  selectNation,\n  newBet,\n} from '../redux/actions'\n\nclass BetBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      accountAddress: undefined,\n      accountBalance: undefined,\n      accountBandwidth: undefined,\n      dropdown: false,\n      betAmount: 10,\n      visible: false,\n      countdown: 0,\n      timeUntilDismissed: 2,\n      success: false,\n      alertText: 'none'\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n    //    this.fetchAccountBandwidth();\n  }\n\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      accountBalance: balanceInTRX\n    });\n  }\n\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n    // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n    //   accountAddress\n    // ); // Base58\n    console.log(accountAddress)\n    this.setState({\n      accountAddress: accountAddress\n    });\n  }\n\n  toggle(which) {\n    const newState = { ...this.state\n    };\n    newState[which] = !this.state[which];\n    this.setState(newState);\n  }\n\n  showAlert = (result, data) => {\n    this.clearInterval();\n    this.setState({\n      visible: true,\n      countdown: 0,\n      timeUntilDismissed: 5,\n      success: result,\n      alertText: data\n    });\n    this.interval = setInterval(this.handleTimeChange, 1000);\n  }\n\n  handleTimeChange = () => {\n    if (this.state.countdown < this.state.timeUntilDismissed - 1) {\n      this.setState({\n        ...this.state,\n        ...{\n          countdown: this.state.countdown + 1\n        }\n      });\n      return;\n    }\n\n    this.setState({ ...this.state,\n      ...{\n        visible: false\n      }\n    });\n    this.clearInterval();\n  }\n\n  clearInterval = () => {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n\n  handleClick = (event) => {\n    console.log(event.target.value)\n    //   const currentNation = event.properties.name\n    //   console.log(\"clicked on \", currentNation)\n    //   this.props.selectNation(currentNation)\n    //   console.log(\"nations: \", this.props.nations)\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      betAmount: event.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n\n    const bet = {\n      address: this.state.accountAddress,\n      amount: this.state.betAmount,\n      state: this.props.selectedNations\n    }\n\n    if (bet.address !== undefined && bet.amount && bet.state.length > 0) {\n      // actually do the transaction and verify that is ok\n      axios.post('http://localhost:4000/bets/add', bet)\n        .then(res => {\n          console.log(res.data)\n          if (res.status === 200) {\n            this.showAlert(true, \"transaction executed succesfully\")\n            this.props.newBet(bet)\n          } else {\n            this.showAlert(false, \"transaction not executed\")\n          }\n        });\n\n    } else if (bet.address === undefined) {\n      this.showAlert(false, \"address undefined\")\n    } else if (bet.state.length === 0) {\n      this.showAlert(false, \"you have to select at list one state\")\n    }\n\n  }\n\n  render() {\n    const {\n      accountAddress,\n      accountBalance,\n      accountBandwidth\n    } = this.state;\n    return ( <\n        ListGroup flush >\n        <\n        ListGroupItem className = \"p-3\" >\n        <\n        Row >\n        <\n        Col >\n        <\n        Form > {\n          /*}\n                          <InputGroup className=\"mb-3\">\n                            <FormInput />\n                            <Dropdown\n                              open={this.state.dropdown}\n                              toggle={() => this.toggle(\"dropdown\")}\n                              addonType=\"append\"\n                            >\n                              <DropdownToggle caret>Dropdown</DropdownToggle>\n                              <DropdownMenu small right>\n                                {this.props.nations.map((geography,id) => {\n                                  return (\n                                    <DropdownItem key={id} onClick={this.handleClick()}>{geography.properties.name}</DropdownItem>\n                                  )\n                                })}\n                              </DropdownMenu>\n                            </Dropdown>\n                          </InputGroup>\n                        */\n        }\n\n        <\n        FormGroup >\n        <\n        label > Bet Amount < /label> <\n        FormInput onChange = {\n          (event) => this.handleChange(event)\n        }\n        id = \"betAmount\"\n        defaultValue = {\n          10\n        }\n        /> < /\n        FormGroup >\n\n        <\n        FormGroup >\n        <\n        label htmlFor = \"TRXBalance\" > TRX BAlance < /label> <\n        FormInput value = {\n          accountBalance\n        }\n        readOnly /\n        >\n        <\n        /FormGroup>\n\n        <\n        FormGroup >\n        <\n        label htmlFor = \"currentPayBack\" > Current PayBack < /label> <\n        FormInput value = {\n          3\n        }\n        readOnly /\n        >\n        <\n        /FormGroup>\n\n        <\n        label > Seleceted States < /label> {\n        this.props.selectedNations.length > 0 ? ( <\n          ListGroup > {\n            this.props.selectedNations.map((nation, id) => {\n              return ( <\n                ListGroupItem key = {\n                  id\n                } > {\n                  nation\n                } < /ListGroupItem>\n              )\n            })\n          } <\n          /ListGroup>) : ( <\n          ListGroupItem > no nation selected < /ListGroupItem>\n        )\n      }\n\n\n      <\n      Button onClick = {\n        (bet) => this.handleSubmit(bet)\n      } > Bet < /Button> <\n    Alert className = \"mb-3\"\n    open = {\n      this.state.visible\n    }\n    theme = {\n        this.state.success ? \"success\" : \"danger\"\n      } > {\n        this.state.alertText\n      } <\n      /Alert> < /\n      Form > <\n      /Col> < /\n      Row > <\n      /ListGroupItem> < /\n      ListGroup >\n  )\n}\n}\n\nconst mapStateToProps = state => ({\n  selectedNations: selectedNations(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  selectNation: (nation) => dispatch(selectNation(nation)),\n  newBet: (bet) => dispatch(newBet(bet)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BetBox);\n"]},"metadata":{},"sourceType":"module"}