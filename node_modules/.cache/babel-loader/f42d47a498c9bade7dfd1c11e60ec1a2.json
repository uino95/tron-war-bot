{"ast":null,"code":"import _toConsumableArray from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from \"redux\";\nimport { SELECT_NATION, MAP_UPDATED } from \"./actions\";\n\nvar merge = function merge(prev, next) {\n  return Object.assign({}, prev, next);\n};\n\nvar initialState = {\n  selectedNations: [],\n  nations: []\n};\n\nvar mapReducer = function mapReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_NATION:\n      if (state.selectedNations.includes(action.nation)) return {\n        selectedNations: state.selectedNations.filter(function (nation) {\n          return action.nation != nation;\n        }),\n        nations: state.nations\n      };else return {\n        selectedNations: [].concat(_toConsumableArray(state.selectedNations), [action.nation]),\n        nations: state.nations\n      };\n\n    case MAP_UPDATED:\n      return {\n        selectedNations: [],\n        nations: action.nations\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = combineReducers({\n  map: mapReducer\n});\nexport default reducer;","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/redux/reducer.js"],"names":["combineReducers","SELECT_NATION","MAP_UPDATED","merge","prev","next","Object","assign","initialState","selectedNations","nations","mapReducer","state","action","type","includes","nation","filter","reducer","map"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SACEC,aADF,EAEEC,WAFF,QAGO,WAHP;;AAKA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOC,IAAP;AAAA,SAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwBC,IAAxB,CAAhB;AAAA,CAAd;;AAEA,IAAMG,YAAY,GAAC;AAClBC,EAAAA,eAAe,EAAC,EADE;AAElBC,EAAAA,OAAO,EAAC;AAFU,CAAnB;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,aAAL;AACC,UAAGW,KAAK,CAACH,eAAN,CAAsBM,QAAtB,CAA+BF,MAAM,CAACG,MAAtC,CAAH,EACC,OAAO;AACNP,QAAAA,eAAe,EAAEG,KAAK,CAACH,eAAN,CAAsBQ,MAAtB,CAA6B,UAAAD,MAAM;AAAA,iBAAIH,MAAM,CAACG,MAAP,IAAiBA,MAArB;AAAA,SAAnC,CADX;AAENN,QAAAA,OAAO,EAAEE,KAAK,CAACF;AAFT,OAAP,CADD,KAMC,OAAO;AACND,QAAAA,eAAe,+BAAMG,KAAK,CAACH,eAAZ,IAA6BI,MAAM,CAACG,MAApC,EADT;AAENN,QAAAA,OAAO,EAAEE,KAAK,CAACF;AAFT,OAAP;;AAIF,SAAKR,WAAL;AACF,aAAO;AACNO,QAAAA,eAAe,EAAE,EADX;AAENC,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAFV,OAAP;;AAKE;AACE,aAAOE,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,IAAMM,OAAO,GAAGlB,eAAe,CAAC;AAC9BmB,EAAAA,GAAG,EAAER;AADyB,CAAD,CAA/B;AAIA,eAAeO,OAAf","sourcesContent":["import { combineReducers } from \"redux\";\n\nimport {\n  SELECT_NATION,\n  MAP_UPDATED\n} from \"./actions\";\n\nconst merge = (prev, next) => Object.assign({}, prev, next);\n\nconst initialState={\n\tselectedNations:[],\n\tnations:[]\n}\n\nconst mapReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_NATION:\n    \tif(state.selectedNations.includes(action.nation))\n    \t\treturn {\n    \t\t\tselectedNations: state.selectedNations.filter(nation => action.nation != nation),\n    \t\t\tnations: state.nations\n    \t\t}\n    \telse\n    \t\treturn {\n\t    \t\tselectedNations: [...state.selectedNations, action.nation],\n\t    \t\tnations: state.nations\n    \t\t}\n    case MAP_UPDATED:\n\t\treturn {\n\t\t\tselectedNations: [],\n\t\t\tnations: action.nations\n\t\t}\n\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  map: mapReducer\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}