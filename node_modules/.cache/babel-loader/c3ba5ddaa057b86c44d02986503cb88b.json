{"ast":null,"code":"import _regeneratorRuntime from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/spranga/Dev/tron-war-bot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/spranga/Dev/tron-war-bot/src/components/BetBox.js\";\nimport React from \"react\";\nimport { ListGroup, ListGroupItem, Row, Col, Form, FormInput, FormGroup, FormCheckbox, FormSelect, Button, InputGroup, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Alert } from \"shards-react\";\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { selectedNations } from '../redux/selector';\nimport { selectNation as _selectNation } from '../redux/actions';\n\nvar BetBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BetBox, _React$Component);\n\n  function BetBox(props) {\n    var _this;\n\n    _classCallCheck(this, BetBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BetBox).call(this, props));\n\n    _this.showAlert = function (result, data) {\n      _this.clearInterval();\n\n      _this.setState({\n        visible: true,\n        countdown: 0,\n        timeUntilDismissed: 5,\n        success: result,\n        alertText: data\n      });\n\n      _this.interval = setInterval(_this.handleTimeChange, 1000);\n    };\n\n    _this.handleTimeChange = function () {\n      if (_this.state.countdown < _this.state.timeUntilDismissed - 1) {\n        _this.setState(_objectSpread({}, _this.state, {\n          countdown: _this.state.countdown + 1\n        }));\n\n        return;\n      }\n\n      _this.setState(_objectSpread({}, _this.state, {\n        visible: false\n      }));\n\n      _this.clearInterval();\n    };\n\n    _this.clearInterval = function () {\n      clearInterval(_this.interval);\n      _this.interval = null;\n    };\n\n    _this.handleClick = function (event) {\n      console.log(event.target.value); //   const currentNation = event.properties.name\n      //   console.log(\"clicked on \", currentNation)\n      //   this.props.selectNation(currentNation)\n      //   console.log(\"nations: \", this.props.nations)\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState({\n        betAmount: event.target.value\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      var bet = {\n        address: _this.state.accountAddress,\n        amount: _this.state.betAmount,\n        state: _this.props.selectedNations\n      };\n\n      if (bet.address !== undefined && bet.amount && bet.state.length > 0) {\n        // actually do the transaction and verify that is ok \n        axios.post('http://localhost:4000/bets/add', bet).then(function (res) {\n          console.log(res.data);\n          res.status === 200 ? _this.showAlert(true, \"transaction executed succesfully\") : _this.showAlert(false, \"transaction not executed\");\n        });\n      } else if (bet.address === undefined) {\n        _this.showAlert(false, \"address undefined\");\n      } else if (bet.state.length === 0) {\n        _this.showAlert(false, \"you have to select at list one state\");\n      }\n    };\n\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      accountAddress: undefined,\n      accountBalance: undefined,\n      accountBandwidth: undefined,\n      dropdown: false,\n      betAmount: 10,\n      visible: false,\n      countdown: 0,\n      timeUntilDismissed: 2,\n      success: false,\n      alertText: 'none'\n    };\n    return _this;\n  }\n\n  _createClass(BetBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAccountAddress();\n      this.fetchAccountBalance(); //    this.fetchAccountBandwidth();\n    }\n  }, {\n    key: \"fetchAccountBalance\",\n    value: function () {\n      var _fetchAccountBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var balanceInSun, balanceInTRX;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return window.tronWeb.trx.getBalance();\n\n              case 2:\n                balanceInSun = _context.sent;\n                //number\n                balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n                // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n                this.setState({\n                  accountBalance: balanceInTRX\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchAccountBalance() {\n        return _fetchAccountBalance.apply(this, arguments);\n      }\n\n      return fetchAccountBalance;\n    }()\n  }, {\n    key: \"fetchAccountAddress\",\n    value: function () {\n      var _fetchAccountAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var account, accountAddress;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.tronWeb.trx.getAccount();\n\n              case 2:\n                account = _context2.sent;\n                accountAddress = account.address; // HexString(Ascii)\n                // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n                //   accountAddress\n                // ); // Base58\n\n                console.log(accountAddress);\n                this.setState({\n                  accountAddress: accountAddress\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchAccountAddress() {\n        return _fetchAccountAddress.apply(this, arguments);\n      }\n\n      return fetchAccountAddress;\n    }()\n  }, {\n    key: \"toggle\",\n    value: function toggle(which) {\n      var newState = _objectSpread({}, this.state);\n\n      newState[which] = !this.state[which];\n      this.setState(newState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          accountAddress = _this$state.accountAddress,\n          accountBalance = _this$state.accountBalance,\n          accountBandwidth = _this$state.accountBandwidth;\n      return React.createElement(ListGroup, {\n        flush: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(ListGroupItem, {\n        className: \"p-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Bet Amount\"), React.createElement(FormInput, {\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        },\n        id: \"betAmount\",\n        defaultValue: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"TRXBalance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"TRX BAlance\"), React.createElement(FormInput, {\n        value: accountBalance,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"currentPayBack\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Current PayBack\"), React.createElement(FormInput, {\n        value: 3,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Seleceted States\"), this.props.selectedNations.length > 0 ? React.createElement(ListGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, this.props.selectedNations.map(function (nation, id) {\n        return React.createElement(ListGroupItem, {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, nation);\n      })) : React.createElement(ListGroupItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \" no nation selected \"), React.createElement(Button, {\n        onClick: function onClick(bet) {\n          return _this2.handleSubmit(bet);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Bet\"), React.createElement(Alert, {\n        className: \"mb-3\",\n        open: this.state.visible,\n        theme: this.state.success ? \"success\" : \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.state.alertText))))));\n    }\n  }]);\n\n  return BetBox;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectedNations: selectedNations(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    selectNation: function selectNation(nation) {\n      return dispatch(_selectNation(nation));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BetBox);","map":{"version":3,"sources":["/home/spranga/Dev/tron-war-bot/src/components/BetBox.js"],"names":["React","ListGroup","ListGroupItem","Row","Col","Form","FormInput","FormGroup","FormCheckbox","FormSelect","Button","InputGroup","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Alert","axios","connect","selectedNations","selectNation","BetBox","props","showAlert","result","data","clearInterval","setState","visible","countdown","timeUntilDismissed","success","alertText","interval","setInterval","handleTimeChange","state","handleClick","event","console","log","target","value","handleChange","betAmount","handleSubmit","e","bet","address","accountAddress","amount","undefined","length","post","then","res","status","toggle","bind","accountBalance","accountBandwidth","dropdown","fetchAccountAddress","fetchAccountBalance","window","tronWeb","trx","getBalance","balanceInSun","balanceInTRX","fromSun","getAccount","account","which","newState","map","nation","id","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ListGroup,\n  ListGroupItem,\n  Row,\n  Col,\n  Form,\n  FormInput,\n  FormGroup,\n  FormCheckbox,\n  FormSelect,\n  Button,\n  InputGroup,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Alert\n} from \"shards-react\";\n\nimport axios from 'axios'\n\nimport {connect} from 'react-redux'\nimport {selectedNations} from '../redux/selector'\nimport {selectNation} from '../redux/actions'\n\nclass BetBox extends React.Component{\n  \n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      accountAddress: undefined,\n      accountBalance: undefined,\n      accountBandwidth: undefined,\n      dropdown:false,\n      betAmount: 10,\n      visible: false,\n      countdown: 0,\n      timeUntilDismissed: 2,\n      success: false,\n      alertText: 'none'\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n//    this.fetchAccountBandwidth();\n  }\n\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      accountBalance: balanceInTRX\n    });\n  }\n\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n    // const accountAddressInBase58 = window.tronWeb.address.fromHex(\n    //   accountAddress\n    // ); // Base58\n    console.log(accountAddress)\n    this.setState({\n      accountAddress: accountAddress\n    });\n  }\n\n  toggle(which) {\n    const newState = { ...this.state };\n    newState[which] = !this.state[which];\n    this.setState(newState);\n  }\n\n  showAlert = (result, data) => {\n    this.clearInterval();\n    this.setState({ visible: true, countdown: 0, timeUntilDismissed: 5, success: result, alertText: data});\n    this.interval = setInterval(this.handleTimeChange, 1000);\n  }\n\n  handleTimeChange = () => {\n    if (this.state.countdown < this.state.timeUntilDismissed - 1) {\n      this.setState({\n        ...this.state,\n        ...{ countdown: this.state.countdown + 1 }\n      });\n      return;\n    }\n\n    this.setState({ ...this.state, ...{ visible: false } });\n    this.clearInterval();\n  }\n\n  clearInterval = () => {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n\n  handleClick = (event) => {\n    console.log(event.target.value)\n  //   const currentNation = event.properties.name\n  //   console.log(\"clicked on \", currentNation)\n  //   this.props.selectNation(currentNation)\n  //   console.log(\"nations: \", this.props.nations)\n  } \n\n  handleChange = (event) => {\n    this.setState(\n      {betAmount: event.target.value}\n    )\n  }\n\n  handleSubmit = (e) => {\n\n    const bet = {\n      address: this.state.accountAddress,\n      amount: this.state.betAmount,\n      state: this.props.selectedNations\n    }\n\n    if(bet.address !== undefined && bet.amount && bet.state.length > 0){\n      // actually do the transaction and verify that is ok \n      axios.post('http://localhost:4000/bets/add', bet)\n        .then(res => {\n            console.log(res.data)\n            res.status === 200 ? this.showAlert(true, \"transaction executed succesfully\") : this.showAlert(false, \"transaction not executed\")\n          }\n        );\n\n    }\n    else if (bet.address === undefined){\n      this.showAlert(false, \"address undefined\")\n    } else if (bet.state.length === 0){\n      this.showAlert(false, \"you have to select at list one state\")\n    }\n    \n  }\n\n  render(){\n    const { accountAddress, accountBalance, accountBandwidth } = this.state;\n    return (\n      <ListGroup flush>\n        <ListGroupItem className=\"p-3\">\n          <Row>\n            <Col>\n              <Form>\n              {/*}\n                <InputGroup className=\"mb-3\">\n                  <FormInput />\n                  <Dropdown\n                    open={this.state.dropdown}\n                    toggle={() => this.toggle(\"dropdown\")}\n                    addonType=\"append\"\n                  >\n                    <DropdownToggle caret>Dropdown</DropdownToggle>\n                    <DropdownMenu small right>\n                      {this.props.nations.map((geography,id) => {\n                        return (\n                          <DropdownItem key={id} onClick={this.handleClick()}>{geography.properties.name}</DropdownItem>\n                        )\n                      })}\n                    </DropdownMenu>\n                  </Dropdown>\n                </InputGroup>\n              */}\n\n                <FormGroup>\n                  <label>Bet Amount</label>\n                  <FormInput onChange={(event) => this.handleChange(event)} id=\"betAmount\" defaultValue={10}/>\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"TRXBalance\">TRX BAlance</label>\n                  <FormInput\n                    value = {accountBalance}\n                    readOnly\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"currentPayBack\">Current PayBack</label>\n                  <FormInput\n                    value = {3}\n                    readOnly\n                  />\n                </FormGroup>\n\n                <label>Seleceted States</label>\n                {this.props.selectedNations.length > 0 ? (\n                <ListGroup>\n                  {this.props.selectedNations.map((nation,id) => {\n                    return (\n                      <ListGroupItem key={id}>{nation}</ListGroupItem>\n                    )\n                  })}\n                </ListGroup>) : (\n                  <ListGroupItem> no nation selected </ListGroupItem>\n                )}\n                \n\n                <Button  onClick={(bet) => this.handleSubmit(bet)}>Bet</Button>\n                <Alert className=\"mb-3\" open={this.state.visible} theme={this.state.success ? \"success\" : \"danger\"}>\n                  {this.state.alertText}\n                </Alert>\n              </Form>\n            </Col>\n          </Row>\n        </ListGroupItem>\n      </ListGroup>\n  )}\n}\n\nconst mapStateToProps = state => ({\n  selectedNations: selectedNations(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  selectNation: (nation) => dispatch(selectNation(nation)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BetBox);\n"]},"metadata":{},"sourceType":"module"}