{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"bignumber.js\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"semver\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","apply","toConsumableArray_default","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","self","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","isNotNullOrUndefined","val","src_utils","objectSpread_default","code","accounts","crypto","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","catch","payload","method","keys","params","Validator","tronWeb","param","msg","callback","Function","normalized","no","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","gt","lt","gte","lte","se","optional","isAddress","notPositive","notEqual","invalid","return","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","to","from","defaultAddress","sendTrx","notValid","fullNode","to_address","owner_address","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","_options$abi","_options$bytecode","bytecode","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","typeof_default","splice","_triggerSmartContract","contractAddress","functionSelector","_Object$assign","assign","_parameters$i","function_selector","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","ownerAddress","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","activesPermission","owner","witness","actives","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","raw_data","_context","t0","account","_ref5","getAccount","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","_this3","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_this4","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","_context3","fromPrivateKey","t1","permissionId","multiSign","Permission_id","getSignWeight","signWeight","foundKey","permission","approved_list","_context4","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context7","_context8","_context9","_context10","_context11","proposal","getProposal","listProposals","_ref17","_ref17$proposals","proposals","getChainParameters","_ref18","_ref18$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref19","_ref19$exchanges","exchanges","_ref20","_ref20$exchanges","getNodeInfo","info","_this5","getTokenListByName","_this6","getTokenByID","messageBytes","messageDigest","recovered","tronAddress","fromHex","signingKey","signDigest","getFunctionSelector","getParamTypes","decodeOutput","filter","_ref3","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","triggerSmartContract","constant_result","msg2","chunk","trx","broadcast","error","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","abrupt","sent","setTimeout","resMessage","rawResponse","contractResult","stop","eventServer","listener","lastBlock","since","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","priorEvent","bindListener","clearInterval","setInterval","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","pluginInterface","requires","components","plugged","skipped","plugin","semver","satisfies","version","component","Event","healthcheck","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","possibleConstructorReturn_default","getPrototypeOf_default","fullHost","assertThisInitialized_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","abs","setAddress","emit","provider","knownProvider","setStatusPage","_this$event","setServer","currentProviders","_this$event2","_this$event3","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"semver\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return self.tronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                names: ['receiver', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot freeze balance to same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                names: ['receiver', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot unfreeze balance to same account'\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: toHex(address)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if (utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'function selector',\n                type: 'not-empty-string',\n                value: functionSelector\n            }\n        ], callback))\n            return;\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if (parameters.length) {\n            const abiCoder = new AbiCoder();\n            let types = [];\n            const values = [];\n\n            for (let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        };\n\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        callback = false) {\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  callback = false) {\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      callback = false) {\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if (err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && !utils.isNotNullOrUndefined(value))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if (!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/,'');\n        signature = signature.replace(/^0x/,'');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/,'');\n        const signingKey = new SigningKey(privateKey);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // set permission id\n        transaction.raw_data.contract[0].Permission_id = permissionId;\n\n        // check if private key insides permission list\n        const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n        const signWeight = await this.getSignWeight(transaction, permissionId);\n\n        if (signWeight.result.code === 'PERMISSION_ERROR') {\n            return callback(signWeight.result.message);\n        }\n\n        let foundKey = false;\n        signWeight.permission.keys.map(key => {\n            if (key.address === address)\n                foundKey = true;\n        });\n\n        if (!foundKey)\n            return callback(privateKey + ' has no permission to sign');\n\n        if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n            return callback(privateKey + ' already sign transaction');\n        }\n\n        // reset transaction\n        if (signWeight.transaction && signWeight.transaction.transaction) {\n            transaction = signWeight.transaction.transaction;\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n        } else {\n            return callback('Invalid transaction provided');\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code)\n                return callback({\n                    error: broadcast.code,\n                    message: this.tronWeb.toUtf8(broadcast.message)\n                })\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            plugged: [],\n            skipped: []\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            for (let component in pluginInterface.components) {\n                if (!this.tronWeb.hasOwnProperty(component)) {\n                    // TODO implement new sub-classes\n                    continue\n                }\n                let methods = pluginInterface.components[component]\n                let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                for (let method in methods) {\n                    if (method === 'constructor' || (this.tronWeb[component][method] &&\n                        (pluginNoOverride.includes(method) // blacklisted methods\n                            || /^_/.test(method)) // private methods\n                    )) {\n                        result.skipped.push(method)\n                        continue\n                    }\n                    this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                    result.plugged.push(method)\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n        \n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport {version} from '../package.json';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport {keccak256} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n                // for retro-compatibility:\n                solidityNode = false, eventServer = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if (!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}